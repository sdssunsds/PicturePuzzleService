<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GW</name>
    </assembly>
    <members>
        <member name="T:GW.AOP">
            <summary>
            AOP调用类
            </summary>
        </member>
        <member name="F:GW.AOP.WriteErrorParamaters">
            <summary>
            是否需要记录异常详细信息
            </summary>
        </member>
        <member name="M:GW.AOP.Function``1(System.Delegate,System.Object[])">
            <summary>
            带返回值的AOP调用
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="function">调用方法</param>
            <param name="paramaters">调用方法的参数</param>
            <returns>返回的结果</returns>
        </member>
        <member name="T:GW.IFirstAOP">
            <summary>
            先于方法执行的AOP函数
            </summary>
        </member>
        <member name="M:GW.IFirstAOP.FirstFunction(System.Object[])">
            <summary>
            先于方法执行的方法（可以在该实现上追加AOP特性）
            </summary>
        </member>
        <member name="M:GW.IFirstAOP.GetFirstIndex">
            <summary>
            获取执行顺序
            </summary>
        </member>
        <member name="T:GW.ILastAOP">
            <summary>
            后于方法执行的AOP函数
            </summary>
        </member>
        <member name="M:GW.ILastAOP.LastFunction(System.Object[])">
            <summary>
            后于方法执行的方法（可以在该实现上追加AOP特性）
            </summary>
        </member>
        <member name="M:GW.ILastAOP.GetLastIndex">
            <summary>
            获取执行顺序
            </summary>
        </member>
        <member name="T:GW.IErrorAOP">
            <summary>
            异常处理
            </summary>
        </member>
        <member name="M:GW.IErrorAOP.ErrorFunction(System.Exception,System.Object[])">
            <summary>
            异常处理方法（可以在该实现上追加AOP特性）
            </summary>
            <param name="e">异常源</param>
            <param name="pars">异常涉及到的具体对象</param>
        </member>
        <member name="P:GW.Function.CameraFunction.CameraControl.CameraIndex">
            <summary>
            摄像头索引
            </summary>
        </member>
        <member name="P:GW.Function.CameraFunction.CameraControl.CameraCount">
            <summary>
            摄像头数量
            </summary>
        </member>
        <member name="P:GW.Function.CameraFunction.CameraControl.Item(System.Int32)">
            <summary>
            获取摄像头设备名称
            </summary>
        </member>
        <member name="M:GW.Function.CameraFunction.CameraControl.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Function.CameraFunction.CameraControl.OpenCamera(System.Int32)">
            <summary>
            打开摄像头
            </summary>
            <param name="index">摄像头索引</param>
        </member>
        <member name="M:GW.Function.CameraFunction.CameraControl.CloseCamera">
            <summary>
            关闭摄像头
            </summary>
        </member>
        <member name="M:GW.Function.CameraFunction.CameraControl.GetImage">
            <summary>
            获取图像
            </summary>
        </member>
        <member name="F:GW.Function.CameraFunction.CameraControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:GW.Function.CameraFunction.CameraControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:GW.Function.CameraFunction.CameraControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:GW.Function.DataBaseFunction.BaseType">
            <summary>
            数据库类型枚举
            </summary>
        </member>
        <member name="T:GW.Function.DataBaseFunction.DataBase">
            <summary>
            数据库访问类
            </summary>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBase.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBase.GetUsers">
            <summary>
            获取当前数据库中的所有用户的用户名
            </summary>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBase.GetUsersByName(System.String)">
            <summary>
            获取当前数据库中的所有用户的用户名
            </summary>
            <param name="name">数据库唯一标识</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBase.GetSpaceNames(System.String[])">
            <summary>
            获取当前数据库中的所有表空间或数据库名
            </summary>
            <param name="users">用户名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBase.GetSpaceNamesByName(System.String,System.String[])">
            <summary>
            获取当前数据库中的所有表空间或数据库名
            </summary>
            <param name="name">数据库唯一标识</param>
            <param name="users">用户名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBase.GetTables(System.String[])">
            <summary>
            获取当前数据库中的所有表名
            </summary>
            <param name="spaceNames">表空间或数据库名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBase.GetTablesByName(System.String,System.String[])">
            <summary>
            获取当前数据库中的所有表名
            </summary>
            <param name="name">数据库唯一标识</param>
            <param name="spaceNames">表空间或数据库名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBase.GetColumns(System.String[])">
            <summary>
            获取当前数据库中的所有列名
            </summary>
            <param name="tables">表名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBase.GetColumnsByName(System.String,System.String[])">
            <summary>
            获取当前数据库中的所有列名
            </summary>
            <param name="name">数据库唯一标识</param>
            <param name="tables">表名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBase.GetSqlData(System.String[])">
            <summary>
            获取指定SQL语句的查询结果
            </summary>
            <param name="sqls">查询SQL语句</param>
            <returns>返回多个SQL语句的结果，并有行列之分</returns>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBase.GetSqlDataByName(System.String,System.String[])">
            <summary>
            获取指定SQL语句的查询结果
            </summary>
            <param name="name">数据库唯一标识</param>
            <param name="sqls">查询SQL语句</param>
            <returns>返回多个SQL语句的结果，并有行列之分</returns>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBase.SetSqlData(System.String[])">
            <summary>
            执行指定的SQL语句
            </summary>
            <param name="sqls">增删改SQL语句</param>
            <returns>返回多个SQL语句的结果</returns>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBase.SetSqlDataByName(System.String,System.String[])">
            <summary>
            执行指定的SQL语句
            </summary>
            <param name="name">数据库唯一标识</param>
            <param name="sqls">增删改SQL语句</param>
            <returns>返回多个SQL语句的结果</returns>
        </member>
        <member name="T:GW.Function.DataBaseFunction.DataBaseGlobal">
            <summary>
            数据库控制类
            </summary>
        </member>
        <member name="P:GW.Function.DataBaseFunction.DataBaseGlobal.BaseTypes">
            <summary>
            获取数据库类型
            </summary>
        </member>
        <member name="P:GW.Function.DataBaseFunction.DataBaseGlobal.ConnectionStrings">
            <summary>
            获取数据库连接字符串
            </summary>
        </member>
        <member name="P:GW.Function.DataBaseFunction.DataBaseGlobal.IsReader">
            <summary>
            是否使用DataReader读取数据
            </summary>
        </member>
        <member name="P:GW.Function.DataBaseFunction.DataBaseGlobal.BaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:GW.Function.DataBaseFunction.DataBaseGlobal.ConnectionString">
            <summary>
            获取或设置数据库连接字符串
            </summary>
        </member>
        <member name="E:GW.Function.DataBaseFunction.DataBaseGlobal.AddDataEvent">
            <summary>
            增加数据库时触发的事件
            </summary>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBaseGlobal.AddDataBase(System.String)">
            <summary>
            增加可以连接的数据库
            </summary>
            <param name="connectionString">数据库连接字符串</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBaseGlobal.AddDataBase(System.String,GW.Function.DataBaseFunction.BaseType)">
            <summary>
            增加可以连接的数据库
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBaseGlobal.AddDataBase(System.String,GW.Function.DataBaseFunction.BaseType,System.String)">
            <summary>
            增加可以连接的数据库
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="type">数据库类型</param>
            <param name="name">数据库的唯一名，用于多数据库连接时，寻找使用对应的数据库连接</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBaseGlobal.GetDataBaseGlobal">
            <summary>
            获取数据库控制实例
            </summary>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBaseHelper.InitControl(System.Data.Common.DbConnection,System.Data.Common.DbCommand,System.Data.Common.DbDataAdapter)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBaseHelper.GetData(System.String)">
            <summary>
            查询
            </summary>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBaseHelper.GetData(System.String[])">
            <summary>
            查询
            </summary>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBaseHelper.Affair(System.String[])">
            <summary>
            事务
            </summary>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DataBaseHelper.CloseConnection">
            <summary>
            关闭链接
            </summary>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DBHelper.#ctor(System.String,GW.Function.DataBaseFunction.BaseType)">
            <summary>
            构造
            </summary>
            <param name="connectionStr">数据库连接字符串</param>
            <param name="bt">数据库类型</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DBHelper.SetBaseType(GW.Function.DataBaseFunction.BaseType)">
            <summary>
            设置数据库类型
            </summary>
            <param name="bt">数据库类型</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DBHelper.GetUsers">
            <summary>
            获取当前数据库中的所有用户的用户名
            </summary>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DBHelper.GetSpaceNames(System.String[])">
            <summary>
            获取当前数据库中的所有表空间或数据库名
            </summary>
            <param name="users">用户名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DBHelper.GetTables(System.String[])">
            <summary>
            获取当前数据库中的所有表名
            </summary>
            <param name="spaceNames">表空间或数据库名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DBHelper.GetColumns(System.String[])">
            <summary>
            获取当前数据库中的所有列名
            </summary>
            <param name="tables">表名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DBHelper.GetSqlData(System.String[])">
            <summary>
            获取指定SQL语句的查询结果
            </summary>
            <param name="sqls">查询SQL语句</param>
            <returns>返回多个SQL语句的结果，并有行列之分</returns>
        </member>
        <member name="M:GW.Function.DataBaseFunction.DBHelper.SetSqlData(System.String[])">
            <summary>
            执行指定的SQL语句
            </summary>
            <param name="sqls">增删改SQL语句</param>
            <returns>返回多个SQL语句的结果</returns>
        </member>
        <member name="M:GW.Function.DataBaseFunction.IDBHelper.GetUsers">
            <summary>
            获取当前数据库中的所有用户的用户名
            </summary>
        </member>
        <member name="M:GW.Function.DataBaseFunction.IDBHelper.GetSpaceNames(System.String[])">
            <summary>
            获取当前数据库中的所有表空间或数据库名
            </summary>
            <param name="users">用户名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.IDBHelper.GetTables(System.String[])">
            <summary>
            获取当前数据库中的所有表名
            </summary>
            <param name="spaceNames">表空间或数据库名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.IDBHelper.GetColumns(System.String[])">
            <summary>
            获取当前数据表中的所有列名
            </summary>
            <param name="tables">表名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.IDBHelper.GetSqlData(System.String[])">
            <summary>
            获取指定SQL语句的查询结果
            </summary>
            <param name="sqls">查询SQL语句</param>
            <returns>返回多个SQL语句的结果，并有行列之分</returns>
        </member>
        <member name="M:GW.Function.DataBaseFunction.IDBHelper.SetSqlData(System.String[])">
            <summary>
            执行指定的SQL语句
            </summary>
            <param name="sqls">增删改SQL语句</param>
            <returns>返回多个SQL语句的结果</returns>
        </member>
        <member name="M:GW.Function.DataBaseFunction.IDBHelperByName.GetUsersByName(System.String)">
            <summary>
            获取当前数据库中的所有用户的用户名
            </summary>
            <param name="name">数据库唯一标识</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.IDBHelperByName.GetSpaceNamesByName(System.String,System.String[])">
            <summary>
            获取当前数据库中的所有表空间或数据库名
            </summary>
            <param name="name">数据库唯一标识</param>
            <param name="users">用户名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.IDBHelperByName.GetTablesByName(System.String,System.String[])">
            <summary>
            获取当前数据库中的所有表名
            </summary>
            <param name="name">数据库唯一标识</param>
            <param name="spaceNames">表空间或数据库名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.IDBHelperByName.GetColumnsByName(System.String,System.String[])">
            <summary>
            获取当前数据表中的所有列名
            </summary>
            <param name="name">数据库唯一标识</param>
            <param name="tables">表名</param>
        </member>
        <member name="M:GW.Function.DataBaseFunction.IDBHelperByName.GetSqlDataByName(System.String,System.String[])">
            <summary>
            获取指定SQL语句的查询结果
            </summary>
            <param name="name">数据库唯一标识</param>
            <param name="sqls">查询SQL语句</param>
            <returns>返回多个SQL语句的结果，并有行列之分</returns>
        </member>
        <member name="M:GW.Function.DataBaseFunction.IDBHelperByName.SetSqlDataByName(System.String,System.String[])">
            <summary>
            执行指定的SQL语句
            </summary>
            <param name="name">数据库唯一标识</param>
            <param name="sqls">增删改SQL语句</param>
            <returns>返回多个SQL语句的结果</returns>
        </member>
        <member name="T:GW.Function.DebugFunction.Debugs">
            <summary>
            测试调试类
            </summary>
        </member>
        <member name="M:GW.Function.DebugFunction.Debugs.TestTimeStart">
            <summary>
            开始测试代码运行时间
            </summary>
        </member>
        <member name="M:GW.Function.DebugFunction.Debugs.TestTimeEnd">
            <summary>
            结束测试代码运行时间
            </summary>
            <returns>返回时间长度</returns>
        </member>
        <member name="M:GW.Function.DebugFunction.Debugs.TestTimeStarts">
            <summary>
            开始测试代码运行时间
            </summary>
            <returns>返回testID，测试项索引值</returns>
        </member>
        <member name="M:GW.Function.DebugFunction.Debugs.TestTimeStarts(System.Int32)">
            <summary>
            继续测试代码运行时间
            </summary>
            <param name="testID">测试项索引值</param>
        </member>
        <member name="M:GW.Function.DebugFunction.Debugs.TestTimeStop(System.Int32)">
            <summary>
            暂停测试代码运行时间
            </summary>
            <param name="testID">测试项索引值</param>
            <returns>返回时间长度</returns>
        </member>
        <member name="M:GW.Function.DebugFunction.Debugs.TestTimeEnds(System.Int32)">
            <summary>
            结束测试代码运行时间（一旦结束，testID将会失效）
            </summary>
            <param name="testID">测试项索引值</param>
            <returns>返回时间长度</returns>
        </member>
        <member name="T:GW.Function.DesignerFunction.Controls.GControl">
            <summary>
            控件父类
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Controls.GControl.AutoSize">
            <summary>
            超出打印
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Controls.GControl.Name">
            <summary>
            控件名称
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Controls.GControl.TabIndex">
            <summary>
            控件顺序
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Controls.GControl.Location">
            <summary>
            位置
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Controls.GControl.Size">
            <summary>
            大小
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Controls.GControl.Font">
            <summary>
            字体
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Controls.GControl.ForeColor">
            <summary>
            字体颜色
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Controls.GControl.BackColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Controls.GControl.operationModel">
            <summary>
            操作过程
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Controls.GControl.autoSize">
            <summary>
            自动大小（超出是否打印）
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Controls.GControl.isFocus">
            <summary>
            是否有焦点
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Controls.GControl.isSetPropertyEvent">
            <summary>
            是否触发设置属性的事件
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Controls.GControl.name">
            <summary>
            控件名称
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Controls.GControl.tabIndex">
            <summary>
            控件顺序
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Controls.GControl.location">
            <summary>
            位置
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Controls.GControl.size">
            <summary>
            大小
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Controls.GControl.font">
            <summary>
            字体
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Controls.GControl.foreColor">
            <summary>
            字体颜色
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Controls.GControl.backColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Controls.GControl.panel">
            <summary>
            父容器
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Controls.GControl.control">
            <summary>
            控件
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Controls.GControl.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Controls.GControl.GW#Function#DesignerFunction#Operation#IOperation#ReDoOperation(GW.Function.DesignerFunction.Operation.OperationModel)">
            <summary>
            重做
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Controls.GControl.GW#Function#DesignerFunction#Operation#IOperation#RevokeOperation(GW.Function.DesignerFunction.Operation.OperationModel)">
            <summary>
            撤销
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Controls.GControl.GW#Function#DesignerFunction#Operation#IOperation#GetOperationModel">
            <summary>
            获取操作过程
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Controls.GControl.SetPropertys(System.String,System.Object,System.Object)">
            <summary>
            设置属性时的事件
            </summary>
            <param name="propertyName">设置的属性名</param>
            <param name="propertyValue">设置的属性值</param>
            <param name="propertyOldValue">设置的属性原值</param>
        </member>
        <member name="M:GW.Function.DesignerFunction.Controls.GControl.SetPropertyByName(System.String,System.Object)">
            <summary>
            根据属性名设置属性
            </summary>
            <param name="propertyName">设置的属性名</param>
            <param name="propertyValue">设置的属性值</param>
        </member>
        <member name="E:GW.Function.DesignerFunction.Controls.GControl.SetPropertysEvent">
            <summary>
            设置属性时的事件
            </summary>
        </member>
        <member name="T:GW.Function.DesignerFunction.Designer">
            <summary>
            设计类
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Designer.IsAutoPage">
            <summary>
            自动分页
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Designer.TabCount">
            <summary>
            页数
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Designer.BottemMargin">
            <summary>
            页底边距
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Designer.Paper">
            <summary>
            纸张类型
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Designer.BackImage">
            <summary>
            背景图片
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Designer.AutoSize">
            <summary>
            无效属性
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Designer.TabIndex">
            <summary>
            无效属性
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Designer.Location">
            <summary>
            无效属性
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Designer.Controls">
            <summary>
            拥有的控件集合
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Designer.isAutoPage">
            <summary>
            自动分页
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Designer.tabCount">
            <summary>
            页数
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Designer.bottemMargin">
            <summary>
            页底边距
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Designer.paper">
            <summary>
            纸张类型
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Designer.backImage">
            <summary>
            背景图片
            </summary>
        </member>
        <member name="F:GW.Function.DesignerFunction.Designer.controls">
            <summary>
            拥有的控件集合
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Designer.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Designer.Clone(GW.Actions.Action{GW.Function.DesignerFunction.Controls.GControl})">
            <summary>
            克隆方法
            </summary>
            <param name="SetPropertysEvent">设置属性时触发的事件</param>
        </member>
        <member name="M:GW.Function.DesignerFunction.Designer.Control_Count">
            <summary>
            获取当前控件数量
            </summary>
            <returns>返回已添加的控件总数</returns>
        </member>
        <member name="M:GW.Function.DesignerFunction.Designer.Control_Insert(GW.Function.DesignerFunction.Controls.GControl)">
            <summary>
            添加控件
            </summary>
            <param name="control">控件</param>
            <returns>返回当前控件集合中的控件数量</returns>
        </member>
        <member name="M:GW.Function.DesignerFunction.Designer.Control_Insert(GW.Function.DesignerFunction.Controls.GControl[])">
            <summary>
            添加控件
            </summary>
            <param name="control">控件数组</param>
            <returns>返回当前控件集合中的控件数量</returns>
        </member>
        <member name="M:GW.Function.DesignerFunction.Designer.Control_Remove(System.Int32)">
            <summary>
            移除控件
            </summary>
            <param name="index">控件索引</param>
            <returns>返回当前控件集合中的控件数量</returns>
        </member>
        <member name="M:GW.Function.DesignerFunction.Designer.Control_Remove(GW.Function.DesignerFunction.Controls.GControl)">
            <summary>
            移除控件
            </summary>
            <param name="control">控件</param>
            <returns>返回当前控件集合中的控件数量</returns>
        </member>
        <member name="M:GW.Function.DesignerFunction.Designer.Control_Remove(GW.Function.DesignerFunction.Controls.GControl[])">
            <summary>
            移除控件
            </summary>
            <param name="control">控件数组</param>
            <returns>返回当前控件集合中的控件数量</returns>
        </member>
        <member name="M:GW.Function.DesignerFunction.Designer.SetPropertyByName(System.String,System.Object)">
            <summary>
            根据属性名设置属性
            </summary>
            <param name="propertyName">设置的属性名</param>
            <param name="propertyValue">设置的属性值</param>
        </member>
        <member name="T:GW.Function.DesignerFunction.BorderStyle">
            <summary>
            边框样式
            </summary>
        </member>
        <member name="T:GW.Function.DesignerFunction.BorderLocation">
            <summary>
            边框位置
            </summary>
        </member>
        <member name="T:GW.Function.DesignerFunction.ControlOperation">
            <summary>
            控件操作
            </summary>
        </member>
        <member name="T:GW.Function.DesignerFunction.Paper">
            <summary>
            纸张类型
            </summary>
        </member>
        <member name="T:GW.Function.DesignerFunction.Operation.IOperation">
            <summary>
            操作接口
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Operation.IOperation.ReDoOperation(GW.Function.DesignerFunction.Operation.OperationModel)">
            <summary>
            重做
            </summary>
            <param name="operation">操作实体</param>
        </member>
        <member name="M:GW.Function.DesignerFunction.Operation.IOperation.RevokeOperation(GW.Function.DesignerFunction.Operation.OperationModel)">
            <summary>
            撤销
            </summary>
            <param name="operation">操作实体</param>
        </member>
        <member name="M:GW.Function.DesignerFunction.Operation.IOperation.GetOperationModel">
            <summary>
            获取操作实体
            </summary>
        </member>
        <member name="T:GW.Function.DesignerFunction.Operation.Operation">
            <summary>
            操作开发类
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Operation.Operation.IsRecordMore">
            <summary>
            是否进行多次操作一次记录功能
            该功能主要用于同时操作多个目标的状态变化，但可以进行一次性的撤销和重做
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Operation.Operation.IsReDo">
            <summary>
            是否可以重做
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Operation.Operation.IsRevoke">
            <summary>
            是否可以撤销
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Operation.Operation.ReDo">
            <summary>
            重做
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Operation.Operation.Revoke">
            <summary>
            撤销
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Operation.OperationLog.IsRecordMore">
            <summary>
            是否进行多次操作一次记录功能
            该功能主要用于同时操作多个目标的状态变化，但可以进行一次性的撤销和重做
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Operation.OperationLog.IsReDo">
            <summary>
            是否可以重做
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Operation.OperationLog.IsRevoke">
            <summary>
            是否可以撤销
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Operation.OperationLog.#cctor">
            <summary>
            静态构造
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Operation.OperationLog.RecordOperationLog(GW.Function.DesignerFunction.Operation.IOperation)">
            <summary>
            记录单次操作过程
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Operation.OperationLog.ReDoOperation">
            <summary>
            重做
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Operation.OperationLog.RevokeOperation">
            <summary>
            撤销
            </summary>
        </member>
        <member name="T:GW.Function.DesignerFunction.Operation.OperationModel">
            <summary>
            操作实体类
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Operation.OperationModel.OperationName">
            <summary>
            操作内容
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Operation.OperationModel.OperationValue">
            <summary>
            操作变化
            </summary>
        </member>
        <member name="P:GW.Function.DesignerFunction.Operation.OperationModel.OperationOldValue">
            <summary>
            原操作值
            </summary>
        </member>
        <member name="M:GW.Function.DesignerFunction.Operation.OperationModel.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="T:GW.Function.DirectXFunction.GwGraphics">
            <summary>
            directX类
            </summary>
        </member>
        <member name="F:GW.Function.DirectXFunction.GwGraphics.device">
            <summary>
            directX设备
            </summary>
        </member>
        <member name="F:GW.Function.DirectXFunction.GwGraphics.key">
            <summary>
            背景色
            </summary>
        </member>
        <member name="F:GW.Function.DirectXFunction.GwGraphics.flags">
            <summary>
            透明色
            </summary>
        </member>
        <member name="F:GW.Function.DirectXFunction.GwGraphics.faces">
            <summary>
            表面数组
            </summary>
        </member>
        <member name="F:GW.Function.DirectXFunction.GwGraphics.description">
            <summary>
            目标表面
            </summary>
        </member>
        <member name="F:GW.Function.DirectXFunction.GwGraphics.control">
            <summary>
            控件
            </summary>
        </member>
        <member name="M:GW.Function.DirectXFunction.GwGraphics.#ctor(System.Windows.Forms.Control,Microsoft.DirectX.DirectDraw.CooperativeLevelFlags)">
            <summary>
            构造
            </summary>
            <param name="control">控件</param>
            <param name="mode">模式</param>
        </member>
        <member name="M:GW.Function.DirectXFunction.GwGraphics.SetDisplayMode(System.Int32,System.Int32)">
            <summary>
            设置分辨率
            </summary>
            <param name="width">宽</param>
            <param name="height">高</param>
        </member>
        <member name="M:GW.Function.DirectXFunction.GwGraphics.SetFaceNum(System.Int32)">
            <summary>
            设置表面的数量
            </summary>
            <param name="num">数量</param>
        </member>
        <member name="M:GW.Function.DirectXFunction.GwGraphics.SetFaceFromImage(System.Int32,System.Drawing.Bitmap)">
            <summary>
            给某个表面设置图片
            </summary>
            <param name="i">表面索引</param>
            <param name="img">图片</param>
        </member>
        <member name="M:GW.Function.DirectXFunction.GwGraphics.CopyFaceToFace(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            将一个表面复制给另一个表面
            </summary>
            <param name="copyIndex">复制的表面索引</param>
            <param name="i">表面索引</param>
            <param name="x">拷贝到另一个表面的X轴</param>
            <param name="y">拷贝到另一个表面的Y轴</param>
        </member>
        <member name="M:GW.Function.DirectXFunction.GwGraphics.CopyFaceToFace(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            将一个表面复制给另一个表面
            </summary>
            <param name="copyIndex">复制的表面索引</param>
            <param name="i">表面索引</param>
            <param name="x">拷贝到另一个表面的X轴</param>
            <param name="y">拷贝到另一个表面的Y轴</param>
            <param name="rect">复制的表面区域</param>
        </member>
        <member name="M:GW.Function.DirectXFunction.GwGraphics.MoveFaceToFace(System.Int32,System.Int32)">
            <summary>
            将一个表面与另一个表面交换
            </summary>
            <param name="moveIndex">交换的表面索引</param>
            <param name="i">表面索引</param>
        </member>
        <member name="M:GW.Function.DirectXFunction.GwGraphics.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:GW.Function.DispatchFunction.DispatchControler">
            <summary>
            调度控制
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.DispatchControler.WaitInternal">
            <summary>
            等待间隔
            </summary>
        </member>
        <member name="F:GW.Function.DispatchFunction.DispatchControler.DirectionControl">
            <summary>
            转向控制（参数：转向角度和转向速度）
            </summary>
        </member>
        <member name="F:GW.Function.DispatchFunction.DispatchControler.MoveControl">
            <summary>
            移动控制（参数：移动距离和移动速度）
            </summary>
        </member>
        <member name="F:GW.Function.DispatchFunction.DispatchControler.WaitCompletion">
            <summary>
            等待车辆运动完成
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchControler.#ctor(GW.Function.DispatchFunction.DispatchManager)">
            <summary>
            构造
            </summary>
            <param name="manager">调度管理对象</param>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchControler.AddTaskObject(GW.Function.DispatchFunction.TaskObject)">
            <summary>
            添加新任务
            </summary>
            <param name="taskObject">任务</param>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchControler.AddTaskObjects(GW.Function.DispatchFunction.TaskObject[])">
            <summary>
            添加新任务
            </summary>
            <param name="objects">任务</param>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchControler.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchControler.InitControl(System.Int32,System.Int32)">
            <summary>
            控制前初始化
            </summary>
            <param name="startIndex">初始化的任务开始索引</param>
            <param name="endIndex">初始化的任务结尾索引</param>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchControler.RunControl">
            <summary>
            启动控制
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchControler.PauseControl">
            <summary>
            暂停控制
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchControler.TerminationControl">
            <summary>
            终止控制
            </summary>
        </member>
        <member name="T:GW.Function.DispatchFunction.DispatchManager">
            <summary>
            调度管理
            </summary>
        </member>
        <member name="F:GW.Function.DispatchFunction.DispatchManager.vehicles">
            <summary>
            被管理的车辆集合
            </summary>
        </member>
        <member name="F:GW.Function.DispatchFunction.DispatchManager.StopVehicle">
            <summary>
            停车委托
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchManager.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchManager.#ctor(GW.Function.DispatchFunction.Vehicle)">
            <summary>
            构造
            </summary>
            <param name="vehicle">初始车辆</param>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchManager.#ctor(GW.Function.DispatchFunction.Vehicle[])">
            <summary>
            构造
            </summary>
            <param name="vehicles">车辆</param>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchManager.AddVehicle(GW.Function.DispatchFunction.Vehicle)">
            <summary>
            增加车辆
            </summary>
            <param name="vehicle">车辆</param>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchManager.AddVehicleRange(GW.Function.DispatchFunction.Vehicle[])">
            <summary>
            增加多个车辆
            </summary>
            <param name="vehicles">车辆</param>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchManager.GetFistVehicle">
            <summary>
            获取第一辆车
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchManager.GetLastVehicle">
            <summary>
            获取最后一辆车
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchManager.GetVehicle(System.Int32)">
            <summary>
            获取车辆
            </summary>
            <param name="index">车辆索引</param>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchManager.GetVehicles">
            <summary>
            获取所有车辆
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchManager.CanCollision(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            发生碰撞
            </summary>
            <returns>是否发生碰撞</returns>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchManager.CanCollision(GW.Function.DispatchFunction.Vehicle,GW.Function.DispatchFunction.Vehicle)">
            <summary>
            发生碰撞
            </summary>
            <returns>是否发生碰撞</returns>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchManager.GetCollisionRange(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            获取碰撞区域
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.DispatchManager.GetCollisionRange(GW.Function.DispatchFunction.TaskTrajectory,GW.Function.DispatchFunction.TaskTrajectory)">
            <summary>
            获取碰撞区域
            </summary>
            <returns>返回每个碰撞车辆的轨迹起始点和结束点</returns>
        </member>
        <member name="T:GW.Function.DispatchFunction.TaskObject">
            <summary>
            任务体
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.TaskObject.TaskList">
            <summary>
            任务轨迹集合
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.TaskObject.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.TaskObject.AddTaskTrajectory(GW.Function.DispatchFunction.TaskTrajectory)">
            <summary>
            添加任务轨迹
            </summary>
            <param name="trajectory">任务轨迹</param>
            <remarks>返回任务轨迹是否可以连接上</remarks>
        </member>
        <member name="T:GW.Function.DispatchFunction.TaskTrajectory">
            <summary>
            任务轨迹
            </summary>
        </member>
        <member name="F:GW.Function.DispatchFunction.TaskTrajectory.waitTime">
            <summary>
            从转向到运动的等待时间补正
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.TaskTrajectory.MoveDistance">
            <summary>
            移动距离
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.TaskTrajectory.MoveSpeed">
            <summary>
            移动速度
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.TaskTrajectory.DirectionAngle">
            <summary>
            转向角度
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.TaskTrajectory.DirectionSpeed">
            <summary>
            转向速度
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.TaskTrajectory.StartCoordinate">
            <summary>
            起始坐标
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.TaskTrajectory.EndCoordinate">
            <summary>
            终止坐标
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.TaskTrajectory.DirectionTime">
            <summary>
            转向时间
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.TaskTrajectory.MovingTime">
            <summary>
            运动时间
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.TaskTrajectory.TrajectoryTime">
            <summary>
            轨迹时间
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.TaskTrajectory.Vehicle">
            <summary>
            车辆
            </summary>
        </member>
        <member name="T:GW.Function.DispatchFunction.Vehicle">
            <summary>
            车类
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.Vehicle.IsSaveHistoricalTrack">
            <summary>
            是否记录历史轨迹s
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.Vehicle.Direction">
            <summary>
            方向
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.Vehicle.Speed">
            <summary>
            车速
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.Vehicle.Turn">
            <summary>
            转向速度
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.Vehicle.Name">
            <summary>
            车辆名称
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.Vehicle.Coordinate">
            <summary>
            坐标
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.Vehicle.Volume">
            <summary>
            体积
            </summary>
        </member>
        <member name="P:GW.Function.DispatchFunction.Vehicle.HistoricalTrack">
            <summary>
            历史轨迹
            </summary>
        </member>
        <member name="E:GW.Function.DispatchFunction.Vehicle.PropertyChangedEvent">
            <summary>
            属性改变后的事件(参数：事件体，属性值，属性名)
            </summary>
        </member>
        <member name="E:GW.Function.DispatchFunction.Vehicle.PropertyChangingEvent">
            <summary>
            属性发生改变前的事件(参数：事件体，要改变的值；返回：是否允许属性改变)
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.Vehicle.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.Vehicle.ClearHistoricalTrack">
            <summary>
            清理历史轨迹
            </summary>
        </member>
        <member name="M:GW.Function.DispatchFunction.Vehicle.GetVertexCoordinates">
            <summary>
            获取顶点坐标（左上角坐标）
            </summary>
        </member>
        <member name="T:GW.Function.DrawFunction.DrawMouse">
            <summary>
            鼠标绘制类
            </summary>
        </member>
        <member name="M:GW.Function.DrawFunction.DrawMouse.DrawPointer(System.Windows.Forms.Form,System.Drawing.Font,System.String)">
            <summary>
            绘制鼠标指针
            </summary>
            <param name="form">鼠标所在窗体</param>
            <param name="font">字体样式</param>
            <param name="text">指针文本</param>
        </member>
        <member name="M:GW.Function.DrawFunction.DrawMouse.DrawPointer(System.Windows.Forms.Control,System.Drawing.Font,System.String)">
            <summary>
            绘制鼠标指针
            </summary>
            <param name="control">鼠标所在控件</param>
            <param name="font">字体样式</param>
            <param name="text">指针文本</param>
        </member>
        <member name="M:GW.Function.DrawFunction.DrawMouse.DrawPointer(System.Windows.Forms.Form,System.Drawing.Image)">
            <summary>
            绘制鼠标指针
            </summary>
            <param name="form">鼠标所在窗体</param>
            <param name="img">指针图像</param>
        </member>
        <member name="M:GW.Function.DrawFunction.DrawMouse.DrawPointer(System.Windows.Forms.Control,System.Drawing.Image)">
            <summary>
            绘制鼠标指针
            </summary>
            <param name="control">鼠标所在控件</param>
            <param name="img">指针图像</param>
        </member>
        <member name="T:GW.Function.DrawFunction.DrawString">
            <summary>
            文字绘制类
            </summary>
        </member>
        <member name="M:GW.Function.DrawFunction.DrawString.DrawStringSingleLine(System.String,System.Drawing.Font,System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Windows.Forms.HorizontalAlignment,System.Drawing.Color,System.Int32)">
            <summary>
            绘制单行文本
            </summary>
            <param name="s">文本</param>
            <param name="font">字体</param>
            <param name="g">绘制实体</param>
            <param name="x">左/右边距</param>
            <param name="y">上边距</param>
            <param name="width">绘制宽度</param>
            <param name="align">对齐方式</param>
            <param name="color">文本颜色</param>
            <param name="height">行高</param>
            <returns>返回行高</returns>
        </member>
        <member name="M:GW.Function.DrawFunction.DrawString.DrawStringSingleLine(System.String,System.Drawing.Font,System.Drawing.Graphics,System.Int32,System.Int32,System.Windows.Forms.HorizontalAlignment,System.Drawing.Color,System.Int32)">
            <summary>
            绘制单行文本
            </summary>
            <param name="s">文本</param>
            <param name="font">字体</param>
            <param name="g">绘制实体</param>
            <param name="margin">边距</param>
            <param name="width">绘制宽度</param>
            <param name="align">对齐方式</param>
            <param name="color">文本颜色</param>
            <param name="height">行高</param>
            <returns>返回行高</returns>
        </member>
        <member name="M:GW.Function.DrawFunction.DrawString.DrawStringMultiLine(System.String,System.Drawing.Font,System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.ContentAlignment,System.Drawing.Color)">
            <summary>
            绘制多行文本
            </summary>
            <param name="s">文本</param>
            <param name="font">字体</param>
            <param name="g">绘制实体</param>
            <param name="x">左/右边距</param>
            <param name="y">上/下边距</param>
            <param name="lineWidth">行宽</param>
            <param name="lineHeight">行高</param>
            <param name="align">对齐方式</param>
            <param name="color">文本颜色</param>
            <returns>返回绘制文本的高度（包括垂直边距）</returns>
        </member>
        <member name="M:GW.Function.DrawFunction.DrawString.DrawStringMultiLine(System.String,System.Drawing.Font,System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Drawing.ContentAlignment,System.Drawing.Color)">
            <summary>
            绘制多行文本
            </summary>
            <param name="s">文本</param>
            <param name="font">字体</param>
            <param name="g">绘制实体</param>
            <param name="margin">边距</param>
            <param name="lineWidth">行宽</param>
            <param name="lineHeight">行高</param>
            <param name="align">对齐方式</param>
            <param name="color">文本颜色</param>
            <returns>返回绘制文本的高度（包括垂直边距）</returns>
        </member>
        <member name="T:GW.Function.ExcelFunction.ExcelCell">
            <summary>
            Excel单元格
            </summary>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelCell.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelCell.Width">
            <summary>
            列宽
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelCell.Size">
            <summary>
            字号
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelCell.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelCell.Color">
            <summary>
            单元格颜色
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelCell.BorderColor">
            <summary>
            边框颜色
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelCell.Border">
            <summary>
            边框
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelCell.IsMerge">
            <summary>
            被合并标记
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelCell.MergeGroup">
            <summary>
            合并组标记
            </summary>
        </member>
        <member name="E:GW.Function.ExcelFunction.ExcelCell.SetWidth">
            <summary>
            设置列宽
            </summary>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelCell.SetWidthNotEvent(System.Int32)">
            <summary>
            设置列宽，不触发SetWidth事件
            </summary>
        </member>
        <member name="T:GW.Function.ExcelFunction.ExcelCellColor">
            <summary>
            单元格颜色
            </summary>
        </member>
        <member name="T:GW.Function.ExcelFunction.ExcelCellBorder">
            <summary>
            单元格边框
            </summary>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelCellBorder.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelCellBorder.Weight">
            <summary>
            边框宽度
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelCellBorder.LeftWeight">
            <summary>
            左边框宽度
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelCellBorder.RightWeight">
            <summary>
            右边框宽度
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelCellBorder.TopWeight">
            <summary>
            上边框宽度
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelCellBorder.BottomWeight">
            <summary>
            下边框宽度
            </summary>
        </member>
        <member name="T:GW.Function.ExcelFunction.ExcelModel">
            <summary>
            Excel算法类
            </summary>
            <summary>
            Excel算法类
            </summary>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelModel.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="path">Excel路径</param>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelModel.#ctor(System.IO.FileStream)">
            <summary>
            构造
            </summary>
            <param name="stream">Excel文件流</param>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelModel.CreateExcel(System.String,GW.Actions.Func{System.Boolean})">
            <summary>
            生成Excel
            </summary>
            <param name="path">Excel路径</param>
            <param name="happenRepeat">发现已存在的Excel时的处理委托，true为覆盖，false取消生成</param>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelModel.ReadExcel(System.String)">
            <summary>
            读取Excel
            </summary>
            <param name="path">Excel路径</param>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelModel.ReadExcel(System.IO.FileStream)">
            <summary>
            读取Excel
            </summary>
            <param name="stream">Excel文件流</param>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelModel.Save(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            保存单元格
            </summary>
            <param name="value">单元格值</param>
            <param name="path">Excel路径（默认为加载时的路径）</param>
            <param name="sheet">页索引</param>
            <param name="row">行索引</param>
            <param name="cell">列索引</param>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelModel.SaveExcel">
            <summary>
            保存Excel
            </summary>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelModel.SaveExcel(System.String)">
            <summary>
            另存Excel
            </summary>
            <param name="path">另存路径</param>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelModel.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelModel.Item(System.Int32)">
            <summary>
            sheet页
            </summary>
            <param name="index">页索引</param>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelModel.Item(System.String)">
            <summary>
            sheet页
            </summary>
            <param name="name">页名称</param>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelModel.SheetCout">
            <summary>
            sheet页数量
            </summary>
        </member>
        <member name="T:GW.Function.ExcelFunction.ExcelRow">
            <summary>
            Excel行
            </summary>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelRow.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelRow.CellCount">
            <summary>
            单元格数量
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelRow.Item(System.Int32)">
            <summary>
            单元格
            </summary>
            <param name="index">单元格索引</param>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelRow.Item(System.String)">
            <summary>
            单元格
            </summary>
            <param name="index">单元格列头</param>
        </member>
        <member name="F:GW.Function.ExcelFunction.ExcelRow.AddRowGetCellWidth">
            <summary>
            添加行时，获取每个列的默认宽度
            </summary>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelRow.CellMerge(System.Int32,System.Int32)">
            <summary>
            合并单元格
            </summary>
            <param name="i">主单元格索引</param>
            <param name="j">被合并的单元格索引（j为被合并的最后一个单元格索引，如：i=0,j=3,则将0,1,2,3进行合并），j大于i向右合并，否则向左合并</param>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelRow.CellMerge(System.String,System.Int32)">
            <summary>
            合并单元格
            </summary>
            <param name="i">主单元格列头</param>
            <param name="count">合并的单元格数量，为正则向右合并，否则向左合并</param>
        </member>
        <member name="T:GW.Function.ExcelFunction.ExcelSheet">
            <summary>
            sheet页
            </summary>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelSheet.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelSheet.RowCount">
            <summary>
            行数量
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelSheet.Name">
            <summary>
            sheet页名称
            </summary>
        </member>
        <member name="P:GW.Function.ExcelFunction.ExcelSheet.Item(System.Int32)">
            <summary>
            行
            </summary>
            <param name="index">行索引</param>
        </member>
        <member name="M:GW.Function.ExcelFunction.ExcelSheet.RowCellMerge(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            合并单元格
            </summary>
            <param name="rowIndex">起始行索引</param>
            <param name="cellIndex">起始列索引</param>
            <param name="rowCount">合并的行数，正数向下合并，负数向上合并</param>
            <param name="cellCount">合并的列数，正数向右合并，负数向左合并</param>
        </member>
        <member name="M:GW.Function.FileFunction.CsvHelper.Dt2Csv(System.Data.DataTable,System.String,System.String,System.String[])">
            <summary>
            导出报表为Csv
            </summary>
            <param name="dt">数据表</param>
            <param name="strFilePath">物理路径</param>
            <param name="tableheader">表头</param>
            <param name="columname">字段标题</param>
        </member>
        <member name="M:GW.Function.FileFunction.CsvHelper.Dt2Csv``1(System.Collections.Generic.List{``0},System.String,System.String,System.String[])">
            <summary>
            导出报表为Csv
            </summary>
            <param name="list">泛型集合</param>
            <param name="strFilePath">物理路径</param>
            <param name="tableheader">表头</param>
            <param name="columname">字段标题</param>
        </member>
        <member name="M:GW.Function.FileFunction.CsvHelper.Csv2Dt(System.String,System.Int32,System.String[])">
            <summary>
            将Csv读入DataTable
            </summary>
            <param name="filePath">csv文件路径</param>
            <param name="n">表示第n行是字段title,第n+1行是记录开始,n从0开始</param>
            <param name="columname">字段标题</param>
        </member>
        <member name="M:GW.Function.FileFunction.CsvHelper.Csv2Dt``1(System.String,System.Int32)">
            <summary>
            将Csv读入DataTable
            </summary>
            <param name="filePath">csv文件路径</param>
            <param name="n">表示第n行是字段title,第n+1行是记录开始,n从0开始</param>
        </member>
        <member name="T:GW.Function.FileFunction.FileSystem">
            <summary>
            文件系统框架
            </summary>
        </member>
        <member name="M:GW.Function.FileFunction.FileSystem.IsFileOccupancy(System.String)">
            <summary>
            文件是否被占用
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="T:GW.Function.FileFunction.FindTextFromFile">
            <summary>
            搜索文件内容类
            </summary>
        </member>
        <member name="F:GW.Function.FileFunction.FindTextFromFile.IsMatching">
            <summary>
            是否大小写匹配
            </summary>
        </member>
        <member name="F:GW.Function.FileFunction.FindTextFromFile.IsNextOne">
            <summary>
            是否依次搜索
            </summary>
        </member>
        <member name="F:GW.Function.FileFunction.FindTextFromFile.IsPass">
            <summary>
            是否跳过
            </summary>
        </member>
        <member name="E:GW.Function.FileFunction.FindTextFromFile.FindProgress">
            <summary>
            搜索进度触发事件
            </summary>
        </member>
        <member name="M:GW.Function.FileFunction.FindTextFromFile.Find(System.String,System.String,GW.Actions.Action{GW.Function.FileFunction.FindFile})">
            <summary>
            搜索方法
            </summary>
            <param name="value">搜索的字符串</param>
            <param name="rule">规则</param>
            <param name="function">回调事件</param>
        </member>
        <member name="M:GW.Function.FileFunction.FindTextFromFile.Find(System.String,System.String[],GW.Actions.Action{GW.Function.FileFunction.FindFile},GW.Function.FileFunction.FindProgressE)">
            <summary>
            搜索方法
            </summary>
            <param name="value">搜索的字符串</param>
            <param name="rules">多个规则</param>
            <param name="function">回调事件</param>
            <param name="fpe">搜索进度</param>
        </member>
        <member name="M:GW.Function.FileFunction.FindTextFromFile.Find(System.String[],GW.Actions.Action{GW.Function.FileFunction.FindFile},System.String[])">
            <summary>
            搜索方法
            </summary>
            <param name="files">搜索的文件集合</param>
            <param name="function">回调事件</param>
            <param name="rules">规则/多个规则</param>
        </member>
        <member name="M:GW.Function.FileFunction.FindTextFromFile.Find(System.String,GW.Actions.Action{GW.Function.FileFunction.FindFile},System.String[])">
            <summary>
            搜索方法
            </summary>
            <param name="path">搜索的文件夹路径</param>
            <param name="function">回调事件</param>
            <param name="rules">规则/多个规则</param>
        </member>
        <member name="T:GW.Function.FileFunction.FindFile">
            <summary>
            搜索文件实体类
            </summary>
        </member>
        <member name="P:GW.Function.FileFunction.FindFile.Line">
            <summary>
            行号
            </summary>
        </member>
        <member name="P:GW.Function.FileFunction.FindFile.File">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:GW.Function.FileFunction.FindFile.CharIndex">
            <summary>
            字符索引
            </summary>
        </member>
        <member name="P:GW.Function.FileFunction.FindFile.LineText">
            <summary>
            行内容
            </summary>
        </member>
        <member name="P:GW.Function.FileFunction.FindFile.FindRule">
            <summary>
            搜索规则
            </summary>
        </member>
        <member name="T:GW.Function.FileFunction.FindProgressE">
            <summary>
            搜索进度结构
            </summary>
        </member>
        <member name="M:GW.Function.FileFunction.FindProgressE.Clear">
            <summary>
            清除内容
            </summary>
        </member>
        <member name="T:GW.Function.FileFunction.FindForm">
            <summary>
            搜索窗体
            </summary>
        </member>
        <member name="M:GW.Function.FileFunction.FindForm.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="F:GW.Function.FileFunction.FindForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GW.Function.FileFunction.FindForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GW.Function.FileFunction.FindForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GW.Function.FragmentFunction.GetID">
            <summary>
            获取编号（分类）
            </summary>
            <param name="data">数据对象</param>
            <returns>返回编号（分类）</returns>
        </member>
        <member name="T:GW.Function.FragmentFunction.GetStart">
            <summary>
            获取起始时间点
            </summary>
            <param name="data">数据对象</param>
            <returns>返回起始时间点</returns>
        </member>
        <member name="T:GW.Function.FragmentFunction.GetEnd">
            <summary>
            获取结尾时间点
            </summary>
            <param name="data">数据对象</param>
            <returns>返回结尾时间点</returns>
        </member>
        <member name="T:GW.Function.FragmentFunction.FragmentAlgorithm">
            <summary>
            片段算法类
            </summary>
        </member>
        <member name="M:GW.Function.FragmentFunction.FragmentAlgorithm.CreateModelList(System.Object[],GW.Function.FragmentFunction.GetID,GW.Function.FragmentFunction.GetStart,GW.Function.FragmentFunction.GetEnd)">
            <summary>
            生成片段数据集合
            </summary>
            <param name="arrayData">原始数据集（已根据起始时间点正序排序后的数据）</param>
            <param name="getID">获取编号（分类）的委托</param>
            <param name="getStart">获取起始时间点的委托</param>
            <param name="getEnd">获取结尾时间点的委托</param>
            <returns>返回片段统计用数据集</returns>
        </member>
        <member name="T:GW.Function.FragmentFunction.FragmentModel">
            <summary>
            片段实体类
            </summary>
        </member>
        <member name="P:GW.Function.FragmentFunction.FragmentModel.ID">
            <summary>
            编号（分类）
            </summary>
        </member>
        <member name="P:GW.Function.FragmentFunction.FragmentModel.StartTime">
            <summary>
            起始时间点
            </summary>
        </member>
        <member name="P:GW.Function.FragmentFunction.FragmentModel.EndTime">
            <summary>
            结尾时间点
            </summary>
        </member>
        <member name="P:GW.Function.FragmentFunction.FragmentModel.ChildLevel">
            <summary>
            子集
            </summary>
        </member>
        <member name="M:GW.Function.FragmentFunction.FragmentModel.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="T:GW.Function.LogFunction.AddLog">
            <summary>
            追加日志类
            </summary>
        </member>
        <member name="M:GW.Function.LogFunction.AddLog.AddLogLine(System.String,System.String)">
            <summary>
            自动添加日志方法
            </summary>
            <param name="functionName">日志方法名，该方法中必须包含一个整型变量（例："LogHelper.Log({0});"）</param>
            <param name="fileName">增加日志的类文件完整路径</param>
        </member>
        <member name="T:GW.Function.LogFunction.LogForm">
            <summary>
            追加日志窗体
            </summary>
        </member>
        <member name="F:GW.Function.LogFunction.LogForm.isSetColor">
            <summary>
            是否标注颜色
            </summary>
        </member>
        <member name="F:GW.Function.LogFunction.LogForm.fileName">
            <summary>
            打开的文件路径
            </summary>
        </member>
        <member name="M:GW.Function.LogFunction.LogForm.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="F:GW.Function.LogFunction.LogForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GW.Function.LogFunction.LogForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GW.Function.LogFunction.LogForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GW.Function.Player.ManagerPlayer">
            <summary>
            管理播放器
            </summary>
        </member>
        <member name="M:GW.Function.Player.ManagerPlayer.GetPlayer(GW.Function.Player.PlayerType,System.Windows.Forms.Control,Microsoft.DirectX.DirectSound.CooperativeLevel)">
            <summary>
            获取播放器对象
            </summary>
            <param name="type">播放器类型</param>
            <param name="control">使用DirectX类型时，必须传递的参数，占用的控件</param>
            <param name="level">使用DirectX类型时，必须传递的参数，优先级</param>
        </member>
        <member name="T:GW.Function.Player.PlayerType">
            <summary>
            播放器类型
            </summary>
        </member>
        <member name="F:GW.Function.Player.PlayerType.Api">
            <summary>
            基于系统API的声音播放器
            </summary>
        </member>
        <member name="F:GW.Function.Player.PlayerType.DirectX">
            <summary>
            基于DirectX组件的声音播放器
            </summary>
        </member>
        <member name="F:GW.Function.Player.PlayerType.Sound">
            <summary>
            基于SoundPlayer的声音播放器
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.DataHeader.ip_verlen">
            <summary>
            I4位首部长度+4位IP版本号
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.DataHeader.ip_tos">
            <summary>
            8位服务类型TOS
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.DataHeader.ip_totallength">
            <summary>
            16位数据包总长度（字节）
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.DataHeader.ip_id">
            <summary>
            16位标识
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.DataHeader.ip_offset">
            <summary>
            3位标志位
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.DataHeader.ip_ttl">
            <summary>
            8位生存时间 TTL
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.DataHeader.ip_protocol">
            <summary>
            8位协议(TCP, UDP, ICMP, Etc.)
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.DataHeader.ip_checksum">
            <summary>
            16位IP首部校验和
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.DataHeader.ip_srcaddr">
            <summary>
            32位源IP地址
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.DataHeader.ip_destaddr">
            <summary>
            32位目的IP地址
            </summary>
        </member>
        <member name="T:GW.Function.RawSocket.PacketArrivedEventArgs">
            <summary>
            数据包事件主体类
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.PacketArrivedEventArgs.DestinationAddress">
            <summary>
            目的地址
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.PacketArrivedEventArgs.DestinationPort">
            <summary>
            目的端口
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.PacketArrivedEventArgs.IPVersion">
            <summary>
            协议类型
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.PacketArrivedEventArgs.OriginationAddress">
            <summary>
            起源地址
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.PacketArrivedEventArgs.OriginationPort">
            <summary>
            起源端口
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.PacketArrivedEventArgs.Protocol">
            <summary>
            协议类型
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.PacketArrivedEventArgs.MessageBuffer">
            <summary>
            消息数据
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.PacketArrivedEventArgs.HeaderBuffer">
            <summary>
            头数据
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.PacketArrivedEventArgs.ReceiveBuffer">
            <summary>
            接受的数据
            </summary>
        </member>
        <member name="T:GW.Function.RawSocket.PacketArrivedEventHandler">
            <summary>
            接受数据包委托
            </summary>
            <param name="sender">事件源</param>
            <param name="args">事件主体</param>
        </member>
        <member name="T:GW.Function.RawSocket.RawSocket">
            <summary>
            数据包拦截类
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.RawSocket.len_receive_buf">
            <summary>
            得到的数据流的长度
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.RawSocket.SIO_RCVALL">
            <summary>
            监听所有的数据包
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.RawSocket.error_occurred">
            <summary>
            套接字在接收包时是否产生错误
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.RawSocket.keepRunning">
            <summary>
            是否继续进行
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.RawSocket.socket">
            <summary>
            声明套接字
            </summary>
        </member>
        <member name="F:GW.Function.RawSocket.RawSocket.receive_buf_bytes">
            <summary>
            收到的字节
            </summary>
        </member>
        <member name="P:GW.Function.RawSocket.RawSocket.ErrorOccurred">
            <summary>
            套接字在接收包时是否产生错误
            </summary>
        </member>
        <member name="P:GW.Function.RawSocket.RawSocket.KeepRunning">
            <summary>
            是否继续进行
            </summary>
        </member>
        <member name="E:GW.Function.RawSocket.RawSocket.PacketArrival">
            <summary>
            接受数据包回调事件
            </summary>
        </member>
        <member name="M:GW.Function.RawSocket.RawSocket.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:GW.Function.RawSocket.RawSocket.CreateAndBindSocket(System.String)">
            <summary>
            创建RawSocket，并把它与终结点（IPEndPoint：本机IP和端口）绑定
            </summary>
            <param name="IP">IP地址</param>
        </member>
        <member name="M:GW.Function.RawSocket.RawSocket.Run">
            <summary>
            开始监听
            </summary>
        </member>
        <member name="M:GW.Function.RawSocket.RawSocket.Shutdown">
            <summary>
            关闭raw socket
            </summary>
        </member>
        <member name="M:GW.Function.RawSocket.RawSocket.CallReceive(System.IAsyncResult)">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="M:GW.Function.RawSocket.RawSocket.SetSocketOption">
            <summary>
            设置raw socket
            </summary>
        </member>
        <member name="M:GW.Function.RawSocket.RawSocket.Receive(System.Byte[],System.Int32)">
            <summary>
            解析接收的数据包，形成PacketArrivedEventArgs事件数据类对象，并引发PacketArrival事件
            </summary>
            <param name="buf">接收的数据包</param>
            <param name="len">数据包长度</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:GW.Function.ResponsibilityFunction.ResponsibilityParent" -->
        <member name="P:GW.Function.ResponsibilityFunction.ResponsibilityParent.UpResponsibility">
            <summary>
            上一步任务对象
            </summary>
        </member>
        <member name="E:GW.Function.ResponsibilityFunction.ResponsibilityParent.StartEvent">
            <summary>
            责任链任务开始时事件
            </summary>
        </member>
        <member name="E:GW.Function.ResponsibilityFunction.ResponsibilityParent.EndEvent">
            <summary>
            责任链任务结束时事件
            </summary>
        </member>
        <member name="M:GW.Function.ResponsibilityFunction.ResponsibilityParent.RunResponsibility">
            <summary>
            执行责任事务
            </summary>
            <returns>返回是否执行下一步</returns>
        </member>
        <member name="M:GW.Function.ResponsibilityFunction.ResponsibilityParent.BackResponsibility(GW.Function.ResponsibilityFunction.ResponsibilityParent)">
            <summary>
            责任回退事务
            </summary>
            <param name="respon">回退的任务对象</param>
            <returns>返回是否执行下一步</returns>
        </member>
        <member name="M:GW.Function.ResponsibilityFunction.ResponsibilityParent.ComplateResponsibility">
            <summary>
            责任链事务完成
            </summary>
        </member>
        <member name="T:GW.Function.ResponsibilityFunction.Responsibility">
            <summary>
            责任链超类
            </summary>
        </member>
        <member name="F:GW.Function.ResponsibilityFunction.Responsibility.IsSingleResponsibility">
            <summary>
            是否单一责任（默认False，为True时，责任链类似于switch）
            </summary>
        </member>
        <member name="M:GW.Function.ResponsibilityFunction.Responsibility.Run(GW.Function.ResponsibilityFunction.Responsibility)">
            <summary>
            启动责任链
            </summary>
            <param name="responsibility">责任环节</param>
        </member>
        <member name="M:GW.Function.ResponsibilityFunction.Responsibility.op_GreaterThan(GW.Function.ResponsibilityFunction.Responsibility,GW.Function.ResponsibilityFunction.Responsibility)">
            <summary>
            正向责任顺序运算
            </summary>
            <param name="thisResponsibility">当前责任环节</param>
            <param name="nextResponsibility">下个责任环节</param>
            <returns>返回责任环节</returns>
        </member>
        <member name="M:GW.Function.ResponsibilityFunction.Responsibility.op_LessThan(GW.Function.ResponsibilityFunction.Responsibility,GW.Function.ResponsibilityFunction.Responsibility)">
            <summary>
            正向责任顺序运算
            </summary>
            <param name="thisResponsibility">当前责任环节</param>
            <param name="nextResponsibility">下个责任环节</param>
            <returns>返回责任环节</returns>
        </member>
        <member name="M:GW.Function.ResponsibilityFunction.Responsibility.IsNextResponsibility">
            <summary>
            判断是否进入下一个责任环节
            </summary>
            <returns>返回是否进入下一个责任环节</returns>
        </member>
        <member name="M:GW.Function.ResponsibilityFunction.Responsibility.ResponsibilityDescription">
            <summary>
            责任细节，该责任执行逻辑
            </summary>
        </member>
        <member name="T:GW.Function.SocketFunction.RecvMsg">
            <summary>
            接收字符串委托
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="T:GW.Function.SocketFunction.RecvByte">
            <summary>
            接收数据流委托
            </summary>
            <param name="bytes">数据</param>
            <param name="length">长度</param>
        </member>
        <member name="T:GW.Function.SocketFunction.SocketClient">
            <summary>
            Socket客户端
            </summary>
        </member>
        <member name="F:GW.Function.SocketFunction.SocketClient.BufferSize">
            <summary>
            Socket缓冲区
            </summary>
        </member>
        <member name="F:GW.Function.SocketFunction.SocketClient.serverSocket">
            <summary>
            服务Socket
            </summary>
        </member>
        <member name="E:GW.Function.SocketFunction.SocketClient.RecvMsgEvent">
            <summary>
            接收字符串事件
            </summary>
        </member>
        <member name="E:GW.Function.SocketFunction.SocketClient.RecvByteEvent">
            <summary>
            接收数据流事件
            </summary>
        </member>
        <member name="E:GW.Function.SocketFunction.SocketClient.SendResultEvent">
            <summary>
            发送事件
            </summary>
        </member>
        <member name="M:GW.Function.SocketFunction.SocketClient.#ctor(System.String,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="ip">服务IP</param>
            <param name="port">服务端口</param>
        </member>
        <member name="M:GW.Function.SocketFunction.SocketClient.Start">
            <summary>
            开始连接
            </summary>
        </member>
        <member name="M:GW.Function.SocketFunction.SocketClient.SendAsync(System.String)">
            <summary>
            发送消息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:GW.Function.SocketFunction.SocketClient.SendByteAsync(System.Byte[],System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="buffer">数据流</param>
            <param name="bufferlen">长度</param>
        </member>
        <member name="M:GW.Function.SocketFunction.SocketClient.CloseSocket">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:GW.Function.SocketFunction.SocketClient.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:GW.Function.SocketFunction.SendResult">
            <summary>
            发送委托
            </summary>
            <param name="length">数据长度</param>
        </member>
        <member name="T:GW.Function.SocketFunction.AccpetInfo">
            <summary>
            连接委托
            </summary>
            <param name="socket">客户端Socket</param>
        </member>
        <member name="T:GW.Function.SocketFunction.RecvMessage">
            <summary>
            接收委托
            </summary>
            <param name="socket">客户端Socket</param>
            <param name="msg">接收的数据</param>
        </member>
        <member name="T:GW.Function.SocketFunction.SocketServer">
            <summary>
            Socket服务端
            </summary>
        </member>
        <member name="F:GW.Function.SocketFunction.SocketServer.clientSockets">
            <summary>
            客户端session列表
            </summary>
        </member>
        <member name="F:GW.Function.SocketFunction.SocketServer.BufferSize">
            <summary>
            Socket连接缓冲区
            </summary>
        </member>
        <member name="E:GW.Function.SocketFunction.SocketServer.AccpetInfoEvent">
            <summary>
            连接事件
            </summary>
        </member>
        <member name="E:GW.Function.SocketFunction.SocketServer.RecvMessageEvent">
            <summary>
            接收事件
            </summary>
        </member>
        <member name="E:GW.Function.SocketFunction.SocketServer.SendResultEvent">
            <summary>
            发送事件
            </summary>
        </member>
        <member name="M:GW.Function.SocketFunction.SocketServer.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="ip">服务IP</param>
            <param name="port">服务端口</param>
            <param name="numConnections">连接池大小</param>
        </member>
        <member name="M:GW.Function.SocketFunction.SocketServer.Start">
            <summary>
            开启服务
            </summary>
        </member>
        <member name="M:GW.Function.SocketFunction.SocketServer.SendAsync(System.Net.Sockets.Socket,System.String)">
            <summary>
            发送数据
            </summary>
            <param name="clientSocket">客户端Socket</param>
            <param name="message">数据</param>
        </member>
        <member name="M:GW.Function.SocketFunction.SocketServer.SendMessageToAllClientsAsync(System.String)">
            <summary>
            向所有客户端广播消息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:GW.Function.SocketFunction.SocketServer.CloseAllClientSocket">
            <summary>
            关闭所有客户端连接
            </summary>
        </member>
        <member name="M:GW.Function.SocketFunction.SocketServer.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:GW.Function.SoundFunction.SoundEffect">
            <summary>
            声效类
            </summary>
        </member>
        <member name="M:GW.Function.SoundFunction.SoundEffect.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Function.SoundFunction.SoundEffect.#ctor(System.String[])">
            <summary>
            构造
            </summary>
            <param name="soundFiles">声音文件路径（仅支持wav文件）</param>
        </member>
        <member name="M:GW.Function.SoundFunction.SoundEffect.#ctor(System.IO.Stream[])">
            <summary>
            构造
            </summary>
            <param name="soundStreams">声音文件（仅支持wav文件）</param>
        </member>
        <member name="M:GW.Function.SoundFunction.SoundEffect.PlaySoundFile(GW.Function.SoundFunction.PlayMode,System.Int32)">
            <summary>
            播放声音
            </summary>
            <param name="playMode">播放模式</param>
            <param name="fileIndex">声音文件索引</param>
            <returns>返回声音对象</returns>
        </member>
        <member name="M:GW.Function.SoundFunction.SoundEffect.PlaySoundFile(GW.Function.SoundFunction.PlayMode,System.String)">
            <summary>
            播放声音
            </summary>
            <param name="playMode">播放模式</param>
            <param name="filePath">声音文件路径</param>
            <returns>返回声音对象</returns>
        </member>
        <member name="M:GW.Function.SoundFunction.SoundEffect.PlaySoundLooping(System.Int32)">
            <summary>
            循环播放声音
            </summary>
            <param name="fileIndex">声音文件索引</param>
            <returns>返回声音对象</returns>
        </member>
        <member name="M:GW.Function.SoundFunction.SoundEffect.PlaySoundLooping(System.String)">
            <summary>
            循环播放声音
            </summary>
            <param name="filePath">声音文件路径</param>
            <returns>返回声音对象</returns>
        </member>
        <member name="M:GW.Function.SoundFunction.SoundEffect.PlayStop(System.Object)">
            <summary>
            停止播放声音
            </summary>
            <param name="player">声音对象</param>
        </member>
        <member name="M:GW.Function.SoundFunction.SoundEffect.PlaySystemEvent(GW.Function.SoundFunction.SystemEventSound)">
            <summary>
            播放系统事件音
            </summary>
            <param name="systemEventSound">系统事件音效</param>
        </member>
        <member name="T:GW.Function.SoundFunction.SystemEventSound">
            <summary>
            系统事件音效
            </summary>
        </member>
        <member name="F:GW.Function.SoundFunction.SystemEventSound.Asterisk">
            <summary>
            星号
            </summary>
        </member>
        <member name="F:GW.Function.SoundFunction.SystemEventSound.Beep">
            <summary>
            嘟嘟
            </summary>
        </member>
        <member name="F:GW.Function.SoundFunction.SystemEventSound.Exclamation">
            <summary>
            感叹号
            </summary>
        </member>
        <member name="F:GW.Function.SoundFunction.SystemEventSound.Hand">
            <summary>
            手
            </summary>
        </member>
        <member name="F:GW.Function.SoundFunction.SystemEventSound.Question">
            <summary>
            问题
            </summary>
        </member>
        <member name="T:GW.Function.SoundFunction.PlayMode">
            <summary>
            播放模式
            </summary>
        </member>
        <member name="F:GW.Function.SoundFunction.PlayMode.SingleThreadPlay">
            <summary>
            单线程播放
            </summary>
        </member>
        <member name="F:GW.Function.SoundFunction.PlayMode.MultiThreadPlay">
            <summary>
            多线程播放
            </summary>
        </member>
        <member name="F:GW.Function.SoundFunction.PlayMode.LoadOnly">
            <summary>
            仅加载
            </summary>
        </member>
        <member name="T:GW.Function.StructuredEditor.StructuredEdit">
            <summary>
            结构化编辑器（简用）
            </summary>
        </member>
        <member name="P:GW.Function.StructuredEditor.StructuredEdit.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="i">文本索引</param>
            <returns>返回绑定的数据</returns>
        </member>
        <member name="M:GW.Function.StructuredEditor.StructuredEdit.Insert(System.String,System.Object,System.Int32)">
            <summary>
            添加文本及绑定的数据
            </summary>
            <param name="text">文本</param>
            <param name="data">数据</param>
            <param name="index">索引</param>
        </member>
        <member name="M:GW.Function.StructuredEditor.StructuredEdit.GetSelectionData(System.Int32)">
            <summary>
            获取当前选中的文本所绑定的数据
            </summary>
            <param name="index">索引</param>
            <returns>返回绑定的数据</returns>
        </member>
        <member name="T:GW.Function.Util.Ping">
            <summary>
            Ping功能
            </summary>
        </member>
        <member name="M:GW.Function.Util.Ping.PingHost(System.String)">
            <summary>
            Ping主机
            </summary>
            <param name="host">主机</param>
            <returns>返回Ping结果</returns>
        </member>
        <member name="T:GW.Function.Util.PingResultModel">
            <summary>
            Ping结果对象
            </summary>
        </member>
        <member name="P:GW.Function.Util.PingResultModel.Host">
            <summary>
            主机地址
            </summary>
        </member>
        <member name="P:GW.Function.Util.PingResultModel.Reply">
            <summary>
            应答时间
            </summary>
        </member>
        <member name="P:GW.Function.Util.PingResultModel.ByteEndPoint">
            <summary>
            回复缓存终结点
            </summary>
        </member>
        <member name="P:GW.Function.Util.PingResultModel.PingMsg">
            <summary>
            信息
            </summary>
        </member>
        <member name="P:GW.Function.Util.PingResultModel.PingResult">
            <summary>
            Ping结果
            </summary>
        </member>
        <member name="T:GW.Function.Util.PingResult">
            <summary>
            Ping结果枚举
            </summary>
        </member>
        <member name="F:GW.Function.Util.PingResult.OK">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:GW.Function.Util.PingResult.ErrorPacket">
            <summary>
            数据包异常
            </summary>
        </member>
        <member name="F:GW.Function.Util.PingResult.ErrorSocket">
            <summary>
            Socket异常
            </summary>
        </member>
        <member name="F:GW.Function.Util.PingResult.NoResponse">
            <summary>
            无响应
            </summary>
        </member>
        <member name="F:GW.Function.Util.PingResult.OutTime">
            <summary>
            超时
            </summary>
        </member>
        <member name="F:GW.Function.Util.PingResult.NoHost">
            <summary>
            未发现主机
            </summary>
        </member>
        <member name="T:GW.Function.Util.WindowsControl">
            <summary>
            窗体常用方法类
            </summary>
        </member>
        <member name="M:GW.Function.Util.WindowsControl.GetFormControl(System.Windows.Forms.Form)">
            <summary>
            获取窗体中的所有控件
            </summary>
            <param name="form">窗体对象</param>
            <returns>返回以控件名为键的字典</returns>
        </member>
        <member name="M:GW.Function.Util.WindowsControl.GetFormControl(System.Windows.Forms.UserControl)">
            <summary>
            获取窗体中的所有控件
            </summary>
            <param name="user">用户控件</param>
            <returns>返回以控件名为键的字典</returns>
        </member>
        <member name="M:GW.Function.Util.WindowsControl.SetLineSpace(System.Windows.Forms.Control,System.Int32)">
            <summary>
            设置行距
            </summary>
            <param name="ctl">控件</param>
            <param name="dyLineSpacing">间距</param>
        </member>
        <member name="T:GW.Function.Util.Util">
            <summary>
            数据算法类
            </summary>
        </member>
        <member name="M:GW.Function.Util.Util.StringToInt32(System.String)">
            <summary>
            将字符串中有效的数字转换为Int32
            </summary>
            <param name="str">字符串</param>
            <returns>返回Int32</returns>
        </member>
        <member name="M:GW.Function.Util.Util.ByteToString(System.Byte)">
            <summary>
            将字节转换成16进制字符串
            </summary>
            <param name="InByte">字节</param>
            <returns>返回16进制字符串</returns>
        </member>
        <member name="M:GW.Function.Util.Util.ByteToString(System.Byte[])">
            <summary>
            将字节数组转换成16进制字符串
            </summary>
            <param name="InBytes">字节数组</param>
            <returns>返回16进制字符串</returns>
        </member>
        <member name="M:GW.Function.Util.Util.StringToByte(System.String)">
            <summary>
            将16进制字符串转换成字节
            </summary>
            <param name="InString">16进制字符串</param>
            <returns>返回字节</returns>
        </member>
        <member name="M:GW.Function.Util.Util.StringToBytes(System.String)">
            <summary>
            将16进制字符串转换成字节数组
            </summary>
            <param name="InString">16进制字符串</param>
            <returns>返回字节数组</returns>
        </member>
        <member name="M:GW.Function.Util.Util.BytesToObject(System.Byte[])">
            <summary> 
            将一个序列化后的byte[]数组还原         
            </summary>
            <param name="InBytes">byte数组</param>         
            <returns>返回能序列化的对象</returns> 
        </member>
        <member name="M:GW.Function.Util.Util.ObjectToBytes(System.Object)">
            <summary> 
            将一个object对象序列化，返回一个byte[]         
            </summary> 
            <param name="obj">能序列化的对象</param>         
            <returns>返回byte数组</returns> 
        </member>
        <member name="M:GW.Function.Util.Util.ObjectToString(System.Object)">
            <summary>
            将一个可能为字符串的对象转换为字符串
            </summary>
            <param name="obj">可能为字符串的对象</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:GW.Function.Util.Util.StringToIntPtr(System.String)">
            <summary>
            将字符串转换成IntPtr
            </summary>
            <param name="InString">字符串</param>
            <returns>返回IntPtr</returns>
        </member>
        <member name="M:GW.Function.Util.Util.IntPtrToString(System.IntPtr)">
            <summary>
            将IntPtr转换成字符串
            </summary>
            <param name="InIntPtr">IntPtr</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:GW.Function.Util.Util.ClassConversion``1(System.Object,``0)">
            <summary>
            类型转换
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="model">类型实体</param>
            <param name="type">类型</param>
            <returns>返回类型对象</returns>
        </member>
        <member name="M:GW.Function.Util.Util.GetTimeToUTC(System.DateTime,System.Boolean)">
            <summary>
            获取UTC时间
            </summary>
            <param name="time">要转换的时间</param>
            <param name="isMillisecond">是否包含毫秒数，默认为true</param>
        </member>
        <member name="M:GW.Function.Util.Util.GetUTCToTime(System.String)">
            <summary>
            根据UTC时间转换成日期对象
            </summary>
            <param name="s">要转换的时间</param>
        </member>
        <member name="M:GW.Function.Util.Util.EncryptionDecrypt(System.String,System.String)">
            <summary>
            简单加密解密算法
            </summary>
            <param name="key">密钥(加密解密内容的名称)</param>
            <param name="content">加密解密内容</param>
        </member>
        <member name="M:GW.Function.Util.Util.EncryptionDecryptForPrivateKey(System.String,System.String)">
            <summary>
            私钥加密解密算法(必须设置CDKEY)
            </summary>
            <param name="key">公钥</param>
            <param name="content">加密解密内容</param>
        </member>
        <member name="M:GW.Function.Util.Util.SetCDKEY(System.String)">
            <summary>
            设置CDKEY
            </summary>
            <param name="cdkey">CDKEY</param>
        </member>
        <member name="M:GW.Function.Util.Util.GetIntIndex(System.Int32,System.Int32)">
            <summary>
            获取整数中的第几位数的值
            </summary>
            <param name="x">基数</param>
            <param name="index">数位</param>
            <returns>返回该基数中该数位上的数</returns>
        </member>
        <member name="M:GW.Function.Util.Util.SumIntForGradually(System.Int32,System.Int32)">
            <summary>
            ∑和运算：从开始数字加到结束数字（逐级相加，递增值为1）
            </summary>
            <param name="start">开始数字</param>
            <param name="end">结束数字（开始数字 必须小于 结束数字）</param>
            <returns>返回计算的和</returns>
        </member>
        <member name="M:GW.Function.Util.Util.SumIntForSquare(System.Int32,System.Int32)">
            <summary>
            ∑平方和运算：从开始数字的平方加到结束数字的平方（逐级平方求加，递增值为1）
            </summary>
            <param name="start">开始数字</param>
            <param name="end">结束数字（开始数字 必须小于 结束数字）</param>
            <returns>返回计算的和</returns>
        </member>
        <member name="M:GW.Function.Util.Util.SumIntForCube(System.Int32,System.Int32)">
            <summary>
            ∑立方和运算：从开始数字的立方加到结束数字的立方（逐级平方求加，递增值为1）
            </summary>
            <param name="start">开始数字</param>
            <param name="end">结束数字（开始数字 必须小于 结束数字）</param>
            <returns>返回计算的和</returns>
        </member>
        <member name="M:GW.Function.Util.Util.SumIntForGeometricSeries(System.Int32,System.Int32,System.Int32)">
            <summary>
            ∑几何级数和运算：x^start + x^(start + 1) + ... + x^end（逐级平方求加，递增值为1）
            </summary>
            <param name="x">底数</param>
            <param name="start">开始数字（必须大于等于0）</param>
            <param name="end">结束数字（开始数字 必须小于 结束数字）</param>
            <returns>返回底数x的几何级数的和</returns>
        </member>
        <member name="M:GW.Function.Util.Util.Zeroize(System.Int32,System.Int32)">
            <summary>
            补零方法
            </summary>
            <param name="value">需要补零的数字</param>
            <param name="length">最终字符串长度</param>
        </member>
        <member name="F:GW.Function.Util.Util.countB">
            <summary>
            计数标识
            </summary>
        </member>
        <member name="F:GW.Function.Util.Util.numberB">
            <summary>
            数字标识
            </summary>
        </member>
        <member name="F:GW.Function.Util.Util.splitF">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="M:GW.Function.Util.Util.EsayCompress(System.String)">
            <summary>
            队列压缩
            </summary>
            <param name="content">压缩内容</param>
        </member>
        <member name="M:GW.Function.Util.Util.EsayCompress(System.Byte[])">
            <summary>
            队列压缩
            </summary>
            <param name="bytes">压缩内容</param>
        </member>
        <member name="M:GW.Function.Util.Util.EsayRelief(System.String)">
            <summary>
            简单压缩(解压缩)
            </summary>
            <param name="value">解压内容</param>
        </member>
        <member name="M:GW.Function.Util.Util.EsayRelief(System.Byte[])">
            <summary>
            简单压缩(解压缩)
            </summary>
            <param name="value">解压内容</param>
        </member>
        <member name="M:GW.Function.Util.Util.LimitCompress(System.String)">
            <summary>
            极限压缩
            </summary>
            <param name="content">压缩内容</param>
        </member>
        <member name="M:GW.Function.Util.Util.LimitRelief(System.String)">
            <summary>
            极限释放(解压缩)
            </summary>
            <param name="value">解压内容</param>
        </member>
        <member name="M:GW.Function.Util.Util.GetStrTransmission(System.String,System.Int32,System.Int32,GW.Actions.Func{System.String})">
            <summary>
            获取指定范围的字符串
            </summary>
            <param name="key">主键</param>
            <param name="point">起始点</param>
            <param name="length">长度</param>
            <param name="str">获取字符串的方法</param>
        </member>
        <member name="M:GW.Function.Util.Util.GetBitTransmission(System.String,System.Int32,System.Int32,GW.Actions.Func{System.Byte[]})">
            <summary>
            获取指定范围的比特流
            </summary>
            <param name="key">主键</param>
            <param name="point">起始点</param>
            <param name="length">长度</param>
            <param name="bit">获取比特流的方法</param>
        </member>
        <member name="M:GW.Function.Util.Util.IsInstallVS">
            <summary>
            判断是否安装VisualStudio
            </summary>
        </member>
        <member name="M:GW.Function.Util.Util.IsUnsign(System.String)">
            <summary>
            數字驗證
            </summary>
        </member>
        <member name="M:GW.Function.Util.Util.IsInt(System.String)">
            <summary>
            整數驗證
            </summary>
        </member>
        <member name="M:GW.Function.Util.Util.IsStr(System.String)">
            <summary>
            字母數字下劃線
            </summary>
        </member>
        <member name="M:GW.Function.Util.Util.IsStr2(System.String)">
            <summary>
            字母數字下劃線點
            </summary>
        </member>
        <member name="M:GW.Function.Util.Util.IsID18(System.String)">
            <summary>
            十八位身份證驗證
            </summary>
        </member>
        <member name="M:GW.Function.Util.Util.IsFactory(System.String)">
            <summary>
            廠別格式驗證
            </summary>
        </member>
        <member name="M:GW.Function.Util.Util.IsFactory2(System.String)">
            <summary>
            廠別格式驗證2
            </summary>
        </member>
        <member name="M:GW.Function.Util.Util.IsArea(System.String)">
            <summary>
            區域格式驗證
            </summary>
        </member>
        <member name="M:GW.Function.Util.Util.IsYorN(System.String)">
            <summary>
            區域格式驗證
            </summary>
        </member>
        <member name="M:GW.Function.Util.Util.IsVendorType(System.String)">
            <summary>
            判定輸入廠商類別是否為CoCo和Pega
            </summary>
        </member>
        <member name="M:GW.Function.Util.Util.CheckIDCard18(System.String)">
            <summary>
            18位身份证号码验证
            </summary>
        </member>
        <member name="M:GW.Function.Util.Util.CustomCheck(System.String,System.String)">
            <summary>
            自定义验证
            </summary>
            <param name="value">要验证的数据</param>
            <param name="rule">验证规则（正则表达式）</param>
        </member>
        <member name="M:GW.Function.Util.Util.GetAlphabetDict(System.Int32,System.Boolean)">
            <summary>
            获取英文字母
            </summary>
            <param name="i">索引</param>
            <param name="Sensitive">区分大小写（默认为false，即全部返还小写）</param>
        </member>
        <member name="M:GW.Function.Util.Util.GetAccordDict(System.Int32)">
            <summary>
            获取符号
            </summary>
            <param name="i">索引（最大32）</param>
        </member>
        <member name="T:GW.Function.CodeFunction.Compiler">
            <summary>
            重编译类
            </summary>
        </member>
        <member name="P:GW.Function.CodeFunction.Compiler.IsWinForm">
            <summary>
            是否是窗体
            </summary>
        </member>
        <member name="P:GW.Function.CodeFunction.Compiler.ICO">
            <summary>
            图标文件
            </summary>
        </member>
        <member name="P:GW.Function.CodeFunction.Compiler.StartClass">
            <summary>
            起始类名
            </summary>
        </member>
        <member name="P:GW.Function.CodeFunction.Compiler.Dll">
            <summary>
            引用的类库
            </summary>
        </member>
        <member name="M:GW.Function.CodeFunction.Compiler.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="E:GW.Function.CodeFunction.Compiler.CompilerError">
            <summary>
            编译错误回调事件
            </summary>
        </member>
        <member name="M:GW.Function.CodeFunction.Compiler.CompilerCode(System.String[],System.String,System.String[])">
            <summary>
            重编译方法
            </summary>
            <param name="code">编译的代码</param>
            <param name="fileName">输出文件的全名</param>
            <param name="dll">使用的动态链接库</param>
        </member>
        <member name="M:GW.Function.CodeFunction.Compiler.CompilerCode(System.String,System.String)">
            <summary>
            重编译方法
            </summary>
            <param name="path">编译的文件夹</param>
            <param name="fileName">输出文件的全名</param>
        </member>
        <member name="T:GW.Function.CodeFunction.CreateCode">
            <summary>
            代码生成类
            </summary>
        </member>
        <member name="M:GW.Function.CodeFunction.CreateCode.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Function.CodeFunction.CreateCode.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="nameSpace">名字空间</param>
        </member>
        <member name="E:GW.Function.CodeFunction.CreateCode.SetAttribute">
            <summary>
            设置特性的事件（参数包括class、构造（带参数类型）、方法名（带参数类型）和对应的属性名）
            </summary>
        </member>
        <member name="E:GW.Function.CodeFunction.CreateCode.SetParentClass">
            <summary>
            设置继承的父类事件
            </summary>
        </member>
        <member name="E:GW.Function.CodeFunction.CreateCode.SetInterface">
            <summary>
            设置继承的接口事件
            </summary>
        </member>
        <member name="M:GW.Function.CodeFunction.CreateCode.CreateModelForDataTable(System.Data.DataTable,System.String,System.String)">
            <summary>
            根据数据表生成实体类代码
            </summary>
            <param name="table">数据表</param>
            <param name="nameSpace">名字空间</param>
            <param name="modelName">实体类名</param>
            <returns>返回实体类代码</returns>
        </member>
        <member name="M:GW.Function.CodeFunction.CreateCode.CreateModelsForDataSet(System.Data.DataSet,System.String,System.String[])">
            <summary>
            根据数据集生成实体类代码集
            </summary>
            <param name="ds">数据集</param>
            <param name="nameSpace">名字空间</param>
            <param name="modelNames">实体类名</param>
            <returns>返回实体类代码集合</returns>
        </member>
        <member name="M:GW.Function.CodeFunction.CreateCode.CreateGWServiceCode(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            根据数据表生成本框架使用的底层架构代码
            </summary>
            <param name="table">数据表</param>
            <param name="model">实体层的名字</param>
            <param name="dal">数据层的名字</param>
            <param name="bll">业务层的名字</param>
            <returns>返回各个层的代码集合{0:实体类, 1:数据访问类, 2:业务逻辑类}</returns>
        </member>
        <member name="M:GW.Function.CodeFunction.CreateCode.CreateGWServiceCode(System.Data.DataSet,System.String,System.String,System.String)">
            <summary>
            根据数据集生成本框架使用的底层架构代码
            </summary>
            <param name="ds">数据集</param>
            <param name="model">实体层的名字</param>
            <param name="dal">数据层的名字</param>
            <param name="bll">业务层的名字</param>
            <returns>返回各个层的代码集合{0:实体类, 1:数据访问类, 2:业务逻辑类, 3:实体类, 4:数据访问类, 5:业务逻辑类, ..., n:业务逻辑类}</returns>
        </member>
        <member name="T:GW.Function.CodeFunction.Evaluator">
            <summary>   
            本类用来将字符串转为可执行文本并执行
            </summary>   
        </member>
        <member name="M:GW.Function.CodeFunction.Evaluator.#ctor(GW.Function.CodeFunction.EvaluatorItem[])">
            <summary>   
            可执行串的构造函数   
            </summary>   
            <param name="items">   
            可执行字符串数组   
            </param>   
        </member>
        <member name="M:GW.Function.CodeFunction.Evaluator.#ctor(System.Type,System.String,System.String,System.String)">
            <summary>   
            可执行串的构造函数   
            </summary>   
            <param name="returnType">返回值类型</param>   
            <param name="expression">执行表达式</param>   
            <param name="name">执行字符串名称</param>   
            <param name="pars">方法参数</param>
        </member>
        <member name="M:GW.Function.CodeFunction.Evaluator.#ctor(GW.Function.CodeFunction.EvaluatorItem)">
            <summary>   
            可执行串的构造函数   
            </summary>   
            <param name="item">可执行字符串项</param>   
        </member>
        <member name="M:GW.Function.CodeFunction.Evaluator.ConstructEvaluator(GW.Function.CodeFunction.EvaluatorItem[])">
            <summary>   
            解析字符串构造函数   
            </summary>   
            <param name="items">待解析字符串数组</param>   
        </member>
        <member name="M:GW.Function.CodeFunction.Evaluator.EvaluateInt(System.String,System.Object[])">
            <summary>   
            执行字符串并返回整型值   
            </summary>   
            <param name="name">执行字符串名称</param>
            <param name="pars">参数值</param>
            <returns>执行结果</returns>   
        </member>
        <member name="M:GW.Function.CodeFunction.Evaluator.EvaluateString(System.String,System.Object[])">
            <summary>   
            执行字符串并返回字符串型值   
            </summary>   
            <param name="name">执行字符串名称</param>
            <param name="pars">参数值</param>
            <returns>执行结果</returns>   
        </member>
        <member name="M:GW.Function.CodeFunction.Evaluator.EvaluateBool(System.String,System.Object[])">
            <summary>   
            执行字符串并返回布尔型值   
            </summary>   
            <param name="name">执行字符串名称</param>
            <param name="pars">参数值</param>
            <returns>执行结果</returns>   
        </member>
        <member name="M:GW.Function.CodeFunction.Evaluator.Evaluate(System.String,System.Object[])">
            <summary>   
            执行字符串并返 object 型值
            </summary>   
            <param name="name">执行字符串名称</param>
            <param name="pars">参数值</param>
            <returns>执行结果</returns>   
        </member>
        <member name="M:GW.Function.CodeFunction.Evaluator.EvaluateToInteger(System.String)">
            <summary>   
            执行表达式并返回整型值   
            </summary>   
            <param name="code">要执行的表达式</param>   
            <returns>运算结果</returns>   
        </member>
        <member name="M:GW.Function.CodeFunction.Evaluator.EvaluateToString(System.String)">
            <summary>   
            执行表达式并返回字符串型值   
            </summary>   
            <param name="code">要执行的表达式</param>   
            <returns>运算结果</returns>   
        </member>
        <member name="M:GW.Function.CodeFunction.Evaluator.EvaluateToBool(System.String)">
            <summary>   
            执行表达式并返回布尔型值   
            </summary>   
            <param name="code">要执行的表达式</param>   
            <returns>运算结果</returns>   
        </member>
        <member name="M:GW.Function.CodeFunction.Evaluator.EvaluateToObject(System.String)">
            <summary>   
            执行表达式并返回 object 型值   
            </summary>   
            <param name="code">要执行的表达式</param>   
            <returns>运算结果</returns>   
        </member>
        <member name="F:GW.Function.CodeFunction.Evaluator.staticMethodName">
            <summary>   
            静态方法的执行字符串名称   
            </summary>   
        </member>
        <member name="F:GW.Function.CodeFunction.Evaluator._Compiled">
            <summary>   
            用于动态引用生成的类，执行其内部包含的可执行字符串   
            </summary>   
        </member>
        <member name="T:GW.Function.CodeFunction.EvaluatorItem">
            <summary>   
            可执行字符串项（即一条可执行字符串）   
            </summary>   
        </member>
        <member name="F:GW.Function.CodeFunction.EvaluatorItem.ReturnType">
            <summary>   
            返回值类型   
            </summary>   
        </member>
        <member name="F:GW.Function.CodeFunction.EvaluatorItem.Expression">
            <summary>   
            执行表达式   
            </summary>   
        </member>
        <member name="F:GW.Function.CodeFunction.EvaluatorItem.Name">
            <summary>   
            执行字符串名称   
            </summary>   
        </member>
        <member name="F:GW.Function.CodeFunction.EvaluatorItem.Pars">
            <summary>
            方法参数
            </summary>
        </member>
        <member name="M:GW.Function.CodeFunction.EvaluatorItem.#ctor(System.Type,System.String,System.String,System.String)">
            <summary>   
            可执行字符串项构造函数   
            </summary>   
            <param name="returnType">返回值类型</param>
            <param name="expression">执行表达式</param>
            <param name="name">执行字符串名称</param>
            <param name="pars">方法参数</param>
        </member>
        <member name="T:GW.Function.CollectionFunction.GList`1">
            <summary>
            集合类
            </summary>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            构造
            </summary>
            <param name="collection">一个集合，其元素被复制到新列表中</param>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.#ctor(System.Int32)">
            <summary>
            构造
            </summary>
            <param name="capacity">新列表最初可以存储的元素数</param>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.ToArray(System.Int32,System.Int32)">
            <summary>
            将 System.Collections.Generic.List[T] 的元素复制到新数组中。
            </summary>
            <param name="start">起始位置索引</param>
            <param name="length">复制数据的数量</param>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.Get(System.Int32)">
            <summary>
            获取集合中的索引项(深表克隆)
            </summary>
            <param name="index">位置索引</param>
        </member>
        <member name="P:GW.Function.CollectionFunction.GList`1.SortName">
            <summary>
            使用的排序方法
            </summary>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.DataExchange(System.Int32,System.Int32)">
            <summary>
            交换集合中两个数据的位置
            </summary>
            <param name="i">数据1的索引</param>
            <param name="j">数据2的索引</param>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.DisorderSort">
            <summary>
            乱序
            </summary>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.SortAscending">
            <summary>
            排序方法(正序)
            </summary>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.SortAscending(System.String)">
            <summary>
            排序方法(正序)
            </summary>
            <param name="propertyName">根据泛型类的某个属性排序</param>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.SortAscending(System.String,GW.Function.CollectionFunction.SortFunctionName)">
            <summary>
            排序方法(正序)
            </summary>
            <param name="propertyName">根据泛型类的某个属性排序</param>
            <param name="sortName">使用的排序方法</param>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.SortAscending(GW.Actions.Func{`0,System.Object},GW.Function.CollectionFunction.SortFunctionName)">
            <summary>
            排序方法(正序)
            </summary>
            <param name="seekValue">委托寻找排序属性值</param>
            <param name="sortName">使用的排序方法</param>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.SortDescending">
            <summary>
            排序方法(倒序)
            </summary>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.SortDescending(System.String)">
            <summary>
            排序方法(倒序)
            </summary>
            <param name="propertyName">根据泛型类的某个属性排序</param>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.SortDescending(System.String,GW.Function.CollectionFunction.SortFunctionName)">
            <summary>
            排序方法(倒序)
            </summary>
            <param name="propertyName">根据泛型类的某个属性排序</param>
            <param name="sortName">使用的排序方法</param>
        </member>
        <member name="M:GW.Function.CollectionFunction.GList`1.SortDescending(GW.Actions.Func{`0,System.Object},GW.Function.CollectionFunction.SortFunctionName)">
            <summary>
            排序方法(倒序)
            </summary>
            <param name="seekValue">委托寻找排序属性值</param>
            <param name="sortName">使用的排序方法</param>
        </member>
        <member name="T:GW.Function.CollectionFunction.SortFunctionName">
            <summary>
            九大排序方法
            </summary>
        </member>
        <member name="F:GW.Function.CollectionFunction.SortFunctionName.InsertionSort">
            <summary>
            插入排序
            </summary>
        </member>
        <member name="F:GW.Function.CollectionFunction.SortFunctionName.BubbleSort">
            <summary>
            冒泡排序
            </summary>
        </member>
        <member name="F:GW.Function.CollectionFunction.SortFunctionName.SelectionSort">
            <summary>
            选择排序
            </summary>
        </member>
        <member name="F:GW.Function.CollectionFunction.SortFunctionName.MergeSort">
            <summary>
            归并排序
            </summary>
        </member>
        <member name="F:GW.Function.CollectionFunction.SortFunctionName.QuickSort">
            <summary>
            快速排序
            </summary>
        </member>
        <member name="F:GW.Function.CollectionFunction.SortFunctionName.HeapifySort">
            <summary>
            堆排序
            </summary>
        </member>
        <member name="F:GW.Function.CollectionFunction.SortFunctionName.CountingSort">
            <summary>
            计数排序
            </summary>
        </member>
        <member name="F:GW.Function.CollectionFunction.SortFunctionName.RadixSort">
            <summary>
            基数排序
            </summary>
        </member>
        <member name="F:GW.Function.CollectionFunction.SortFunctionName.BucketSort">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="T:GW.Function.ComputerFunction.Computer">
            <summary>
            计算机功能类
            </summary>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.GetDPI">
            <summary>
            获取系统DPI分辨率
            </summary>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.GetIISVersion">
            <summary>
            获取IIS版本（未安装IIS则返回-1）
            </summary>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.GetCpuID">
            <summary>
            获取CPU编号
            </summary>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.GetHostName">
            <summary>
            获取本机名
            </summary>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.GetMAC">
            <summary>
            获取本机MAC地址
            </summary>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.GetIP">
            <summary>
            获取本机IP地址
            </summary>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.GetRegistry(System.String,System.String)">
            <summary>
            获取注册表的值
            </summary>
            <param name="path">注册表路径</param>
            <param name="name">注册表项的名称</param>
            <returns>返回注册表项的值</returns>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.GetServerMAC(System.String)">
            <summary>
            获取远程主机的MAC地址
            </summary>
            <param name="serverIP">远程主机IP地址</param>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.GetSystemIcon(System.Int32,System.Boolean,System.String)">
            <summary>
            获取系统图标
            </summary>
            <param name="index">图标索引(最多1000个)</param>
            <param name="isSmall">是否是小图标</param>
            <param name="name">API名</param>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.GetSystemResolvingPower">
            <summary>
            获取系统分辨率
            </summary>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.GetHardDiskIDs">
            <summary>
            获取本机所有硬盘编号
            </summary>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.GetProcessNames">
            <summary>
            获取所有进程的进程名
            </summary>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.GetServerNames">
            <summary>
            获取本地服务列表
            </summary>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.GetServerIPs(System.String)">
            <summary>
            获取远程主机的IP地址
            </summary>
            <param name="address">域名地址</param>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.SetRegistry(System.String,System.String,System.String)">
            <summary>
            设置注册表的值
            </summary>
            <param name="path">注册表路径</param>
            <param name="name">注册表项的名称</param>
            <param name="value">注册表项的值</param>
        </member>
        <member name="P:GW.Function.ComputerFunction.Computer.IsInternet">
            <summary>
            是否已经连接到Internet
            </summary>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.IsPingAddress(System.String)">
            <summary>
            是否能Ping通目标地址
            </summary>
            <param name="address">IP地址或域名</param>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.IsProcessExists(System.String)">
            <summary>
            是否存在指定的进程
            </summary>
            <param name="name">进程名</param>
        </member>
        <member name="M:GW.Function.ComputerFunction.Computer.IsServerStarted(System.String,System.String)">
            <summary>
            指定地址的服务是否已经启动
            </summary>
            <param name="serverName">服务名称</param>
            <param name="ip">服务地址（默认：本机）</param>
            <returns></returns>
        </member>
        <member name="T:GW.Function.HookFunction.HookFactory">
            <summary>
            系统键盘钩子(全局键盘钩子)
            </summary>
        </member>
        <member name="M:GW.Function.HookFunction.HookFactory.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="E:GW.Function.HookFunction.HookFactory.OnKeyDownEvent">
            <summary>
            系统(全局)键盘按下事件
            </summary> 
        </member>
        <member name="E:GW.Function.HookFunction.HookFactory.OnKeyUpEvent">
            <summary>
            系统(全局)键盘释放事件
            </summary>
        </member>
        <member name="E:GW.Function.HookFunction.HookFactory.OnKeyPressEvent">
            <summary>
            系统(全局)键盘敲击事件
            </summary>
        </member>
        <member name="M:GW.Function.HookFunction.HookFactory.HiddenKey(System.Windows.Forms.Keys[])">
            <summary>
            屏蔽的键盘按键
            </summary>
            <param name="keys">屏蔽的键</param>
        </member>
        <member name="M:GW.Function.HookFunction.HookFactory.KeyDownToKey(System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
            <summary>
            键盘按下时的键盘映射
            </summary>
            <param name="oKey">被映射的键</param>
            <param name="nKey">映射的键</param>
        </member>
        <member name="M:GW.Function.HookFunction.HookFactory.KeyUpToKey(System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
            <summary>
            键盘释放时的键盘映射
            </summary>
            <param name="oKey">被映射的键</param>
            <param name="nKey">映射的键</param>
        </member>
        <member name="M:GW.Function.HookFunction.HookFactory.RemoveHiddenKeys(System.Windows.Forms.Keys[])">
            <summary>
            移除屏蔽的键
            </summary>
            <param name="keys">屏蔽的键</param>
        </member>
        <member name="M:GW.Function.HookFunction.HookFactory.KeyDownToKey(System.Windows.Forms.Keys)">
            <summary>
            模拟键盘按下
            </summary>
            <param name="key">模拟的键</param>
        </member>
        <member name="M:GW.Function.HookFunction.HookFactory.KeyUpToKey(System.Windows.Forms.Keys)">
            <summary>
            模拟键盘释放
            </summary>
            <param name="key">模拟的键</param>
        </member>
        <member name="M:GW.Function.HookFunction.HookFactory.CheckActivityKey(System.Windows.Forms.Keys)">
            <summary>
            检查该键是否未被屏蔽
            </summary>
            <param name="key">活动的键</param>
        </member>
        <member name="P:GW.Function.HookFunction.KeyboardHook.HiddenKeys">
            <summary>
            屏蔽键盘的按键集合，为null时全屏蔽
            </summary>
        </member>
        <member name="M:GW.Function.HookFunction.KeyboardHook.SetHook">
            <summary>
            安装钩子
            </summary>
        </member>
        <member name="M:GW.Function.HookFunction.KeyboardHook.UnHook">
            <summary>
            卸载钩子
            </summary>
        </member>
        <member name="M:GW.Function.HookFunction.KeyboardHook.GetDownKeys(System.Windows.Forms.Keys)">
            <summary>
            根据已经按下的控制键生成key
            </summary>
        </member>
        <member name="T:GW.Function.HookFunction.Win32Api.KeyboardHookStruct">
            <summary>
            声明键盘钩子的封送结构类型
            </summary>
        </member>
        <member name="F:GW.Function.HookFunction.Win32Api.KeyboardHookStruct.vkCode">
            <summary>
            表示一个在1到254间的虚似键盘码 
            </summary>
        </member>
        <member name="F:GW.Function.HookFunction.Win32Api.KeyboardHookStruct.scanCode">
            <summary>
            表示硬件扫描码
            </summary>
        </member>
        <member name="T:GW.Function.HtmlFunction.JSFunction">
            <summary>
            JS脚本类
            </summary>
        </member>
        <member name="M:GW.Function.HtmlFunction.JSFunction.GetJavaScript(GW.Function.HtmlFunction.JSName)">
            <summary>
            获取JS脚本里的内容
            </summary>
            <param name="name">脚本名称</param>
            <returns>返回脚本文件文本</returns>
        </member>
        <member name="T:GW.Function.HtmlFunction.JSName">
            <summary>
            JS脚本名称
            </summary>
        </member>
        <member name="F:GW.Function.HtmlFunction.JSName.Ajax">
            <summary>
            Ajax脚本
            </summary>
        </member>
        <member name="F:GW.Function.HtmlFunction.JSName.ieExpand">
            <summary>
            IE扩展功能脚本
            </summary>
        </member>
        <member name="F:GW.Function.HtmlFunction.JSName.SaveAs">
            <summary>
            图片另存为脚本
            </summary>
        </member>
        <member name="F:GW.Function.HtmlFunction.JSName.screenImg">
            <summary>
            画框截图脚本
            </summary>
        </member>
        <member name="F:GW.Function.HtmlFunction.JSName.IncludeJS">
            <summary>
            动态加载JS脚本
            </summary>
        </member>
        <member name="F:GW.Function.HtmlFunction.JSName.Mouse">
            <summary>
            鼠标事件脚本
            </summary>
        </member>
        <member name="F:GW.Function.HtmlFunction.JSName.Url">
            <summary>
            网页参数获取脚本
            </summary>
        </member>
        <member name="F:GW.Function.HtmlFunction.JSName.WebService">
            <summary>
            网页调用WebService服务脚本
            </summary>
        </member>
        <member name="T:GW.Function.ImageFunction.PrintImg.CutImage">
            <summary>
            抠图控件
            </summary>
        </member>
        <member name="P:GW.Function.ImageFunction.PrintImg.CutImage.ACTImage">
            <summary>
            设置图片
            </summary>
        </member>
        <member name="F:GW.Function.ImageFunction.PrintImg.CutImage.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:GW.Function.ImageFunction.PrintImg.CutImage.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:GW.Function.ImageFunction.PrintImg.CutImage.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:GW.Function.ImageFunction.ScreenImg.ScreenWebImage">
            <summary>
            内嵌浏览器截图
            </summary>
        </member>
        <member name="P:GW.Function.ImageFunction.ScreenImg.ScreenWebImage.BorderColor">
            <summary>
            选择框的颜色
            </summary>
        </member>
        <member name="P:GW.Function.ImageFunction.ScreenImg.ScreenWebImage.FillColor">
            <summary>
            选择框内部填充色
            </summary>
        </member>
        <member name="P:GW.Function.ImageFunction.ScreenImg.ScreenWebImage.Pellucidity">
            <summary>
            选择框内部透明度
            </summary>
        </member>
        <member name="P:GW.Function.ImageFunction.ScreenImg.ScreenWebImage.ToolRult">
            <summary>
            提示文本格式(宽:#W,高:#H)
            </summary>
        </member>
        <member name="P:GW.Function.ImageFunction.ScreenImg.ScreenWebImage.ToolSize">
            <summary>
            提示文本大小
            </summary>
        </member>
        <member name="P:GW.Function.ImageFunction.ScreenImg.ScreenWebImage.ToolFont">
            <summary>
            提示文本字体
            </summary>
        </member>
        <member name="P:GW.Function.ImageFunction.ScreenImg.ScreenWebImage.ToolFontColor">
            <summary>
            提示文本字体颜色
            </summary>
        </member>
        <member name="P:GW.Function.ImageFunction.ScreenImg.ScreenWebImage.ToolBackColor">
            <summary>
            提示文本背景色
            </summary>
        </member>
        <member name="M:GW.Function.ImageFunction.ScreenImg.ScreenWebImage.#ctor(System.Windows.Forms.Form,System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            构造
            </summary>
            <param name="window">当前主窗口</param>
            <param name="parent">父容器</param>
            <param name="web">内嵌的IE浏览器控件</param>
        </member>
        <member name="M:GW.Function.ImageFunction.ScreenImg.ScreenWebImage.ScreenClick">
            <summary>
            截图按钮点击方法
            </summary>
        </member>
        <member name="M:GW.Function.ImageFunction.StructImg.ActForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GW.Function.ImageFunction.StructImg.ActForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:GW.Function.ImageFunction.StructImg.ImgForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GW.Function.ImageFunction.StructImg.ImgForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GW.Function.ImageFunction.StructImg.ImgStruct">
            <summary>
            图像操作窗体
            </summary>
        </member>
        <member name="M:GW.Function.ImageFunction.StructImg.ImgStruct.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="F:GW.Function.ImageFunction.StructImg.ImgStruct.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GW.Function.ImageFunction.StructImg.ImgStruct.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GW.Function.ImageFunction.StructImg.ImgStruct.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GW.Function.ImageFunction.StructImg.ImgToStruct">
            <summary>
            图片结构化类
            </summary>
        </member>
        <member name="M:GW.Function.ImageFunction.StructImg.ImgToStruct.GetActionImgModel(GW.Function.ImageFunction.StructImg.ActionImg,System.String)">
            <summary>
            根据图片动作生成相关图片动作初始化代码
            </summary>
            <param name="act">图片动作对象</param>
            <param name="nameSpace">名词空间</param>
            <returns>返回代码</returns>
        </member>
        <member name="M:GW.Function.ImageFunction.StructImg.ImgToStruct.CutImage(System.Drawing.Point,System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            抠图方法
            </summary>
            <param name="pos">抠图坐标点</param>
            <param name="cutWidth">抠图宽度</param>
            <param name="cutHeight">抠图高度</param>
            <param name="img">需要抠图的图片</param>
            <returns>返回抠得的图片</returns>
        </member>
        <member name="T:GW.Function.ImageFunction.StructImg.ActionImg">
            <summary>
            图片动作结构
            </summary>
        </member>
        <member name="F:GW.Function.ImageFunction.StructImg.ActionImg.ActName">
            <summary>
            动作名称
            </summary>
        </member>
        <member name="F:GW.Function.ImageFunction.StructImg.ActionImg.Imgs">
            <summary>
            动作图片集
            </summary>
        </member>
        <member name="T:GW.Function.ImageFunction.StructImg.ActionStructImg">
            <summary>
            图片动作结构化
            </summary>
        </member>
        <member name="F:GW.Function.ImageFunction.StructImg.ActionStructImg.ImgName">
            <summary>
            图片名称
            </summary>
        </member>
        <member name="F:GW.Function.ImageFunction.StructImg.ActionStructImg.ImgTopPoint">
            <summary>
            绘制图片的顶点坐标
            </summary>
        </member>
        <member name="F:GW.Function.ImageFunction.StructImg.ActionStructImg.ImgLeftPoint">
            <summary>
            绘制图片的左侧坐标
            </summary>
        </member>
        <member name="F:GW.Function.ImageFunction.StructImg.ActionStructImg.ImgWidth">
            <summary>
            绘制图片的宽度
            </summary>
        </member>
        <member name="F:GW.Function.ImageFunction.StructImg.ActionStructImg.ImgHeight">
            <summary>
            绘制图片的高度
            </summary>
        </member>
        <member name="F:GW.Function.ImageFunction.StructImg.ActionStructImg.Top">
            <summary>
            顶点坐标差
            </summary>
        </member>
        <member name="F:GW.Function.ImageFunction.StructImg.ActionStructImg.Left">
            <summary>
            左侧坐标差
            </summary>
        </member>
        <member name="F:GW.Function.ImageFunction.StructImg.ActionStructImg.ImgSleep">
            <summary>
            与上一张图片绘制完成后的时间间隔(单位毫秒)
            </summary>
        </member>
        <member name="T:GW.Function.RandomFunction.RandomClass">
            <summary>
            随机数类
            </summary>
        </member>
        <member name="M:GW.Function.RandomFunction.RandomClass.GetRandom1(System.Int32,System.Int32)">
            <summary>
            简单随机数，容易出现重复数字
            </summary>
        </member>
        <member name="M:GW.Function.RandomFunction.RandomClass.GetRandom2(System.Int32,System.Int32)">
            <summary>
            一般随机数，不容易出现重复数字
            </summary>
        </member>
        <member name="M:GW.Function.RandomFunction.RandomClass.GetRandom3(System.Int32,System.Int32)">
            <summary>
            复杂随机数，不会出现重复数字，消耗的系统资源多
            </summary>
        </member>
        <member name="M:GW.Function.RandomFunction.RandomClass.GetRandom4(System.Int32,System.Int32)">
            <summary>
            复杂随机数，不会出现重复数字
            </summary>
        </member>
        <member name="T:GW.Function.SpeechRecognition.ListionEvent">
            <summary>
            聆听委托
            </summary>
            <param name="str">听到的内容</param>
        </member>
        <member name="T:GW.Function.SpeechRecognition.SpeechRecognition">
            <summary>
            语音识别类
            </summary>
        </member>
        <member name="M:GW.Function.SpeechRecognition.SpeechRecognition.Speak(System.String)">
            <summary>
            朗读
            </summary>
            <param name="message">朗读的内容</param>
        </member>
        <member name="M:GW.Function.SpeechRecognition.SpeechRecognition.Speak(System.String,System.Int32)">
            <summary>
            朗读
            </summary>
            <param name="message">朗读的内容</param>
            <param name="speech">使用的语音</param>
        </member>
        <member name="F:GW.Function.SpeechRecognition.SpeechRecognition.speechRecognition">
            <summary>
            单例模式
            </summary>
        </member>
        <member name="F:GW.Function.SpeechRecognition.SpeechRecognition.isrg">
            <summary>
            语音识别器
            </summary>
        </member>
        <member name="F:GW.Function.SpeechRecognition.SpeechRecognition.ssrContext">
            <summary>
            语音识别处理器
            </summary>
        </member>
        <member name="E:GW.Function.SpeechRecognition.SpeechRecognition.Listion">
            <summary>
            聆听事件
            </summary>
        </member>
        <member name="M:GW.Function.SpeechRecognition.SpeechRecognition.BeginListion">
            <summary>
            开始聆听
            </summary>
        </member>
        <member name="M:GW.Function.SpeechRecognition.SpeechRecognition.EndListion">
            <summary>
            结束聆听
            </summary>
        </member>
        <member name="M:GW.Function.SpeechRecognition.SpeechRecognition.GetSpeechRecognition">
            <summary>
            获取语音识别实例
            </summary>
        </member>
        <member name="T:GW.Function.UnmanagedFunction.Unmanaged">
            <summary>
            非托管代码类
            </summary>
        </member>
        <member name="T:GW.Function.UnmanagedFunction.Unmanaged.HookProc">
            <summary>
            键盘构造委托
            </summary>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.SendARP(System.Int32,System.Int32,System.Int64@,System.Int32@)">
            <summary>
            获取MAC地址
            </summary>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.GetModuleHandle(System.String)">
            <summary>
            获取句柄
            </summary>
            <param name="lpModuleName">进程模块名称</param>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged._lopen(System.String,System.Int32)">
            <summary>
            获取文件占用状态
            </summary>
            <param name="lpPathName">文件路径</param>
            <param name="iReadWrite">读写状态</param>
            <returns>返回文件句柄</returns>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.ExtractIconEx(System.String,System.Int32,System.IntPtr[],System.IntPtr[],System.Int32)">
            <summary>
            获取系统图标
            </summary>
            <param name="libName">读取图标的API名称(例如：shell32.dll)</param>
            <param name="iconIndex">获取图标的起始索引</param>
            <param name="largeIcon">获取大图标的集合</param>
            <param name="smallIcon">获取小图标的集合</param>
            <param name="nIcons">获取图标的数量</param>
            <returns></returns>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.GetDC(System.IntPtr)">
            <summary>
            该函数检索一指定窗口的客户区域或整个屏幕的显示设备上下文环境的句柄，以后可以在GDI函数中使用该句柄来在设备上下文环境中绘图。
            </summary>
            <param name="hWnd">设备上下文环境被检索的窗口的句柄</param>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.GetParent(System.IntPtr)">
            <summary>
            该函数获得一个指定子窗口的父窗口句柄。
            </summary>
            <param name="hWnd">窗口的句柄</param>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.GetWindowRect(System.IntPtr,GW.Function.UnmanagedFunction.RECT@)">
            <summary>
            获得窗口矩形
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="lpRect">矩形结构</param>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.GetClientRect(System.IntPtr,GW.Function.UnmanagedFunction.RECT@)">
            <summary>
            获得客户区矩形
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="lpRect">矩形结构</param>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            消息发送（向指定的句柄发送消息）
            </summary>
            <param name="hwnd">其窗口程序将接收消息的窗口的句柄</param>
            <param name="msg">指定被发送的消息</param>
            <param name="wParam">指定附加的消息指定信息</param>
            <param name="lParam">指定附加的消息指定信息</param>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.SendMessage(System.IntPtr,System.Int32,System.String,System.IntPtr)">
            <summary>
            消息发送（向指定的句柄发送消息）
            </summary>
            <param name="hwnd">其窗口程序将接收消息的窗口的句柄</param>
            <param name="msg">指定被发送的消息</param>
            <param name="wParam">指定附加的消息指定信息</param>
            <param name="lParam">指定附加的消息指定信息</param>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,GW.Function.UnmanagedFunction.PARAFORMAT2@)">
            <summary>
            消息发送（向指定的句柄发送消息）
            </summary>
            <param name="hWnd">其窗口程序将接收消息的窗口的句柄</param>
            <param name="msg">指定被发送的消息</param>
            <param name="wParam">指定附加的消息指定信息</param>
            <param name="lParam">指定附加的消息指定信息</param>
            <returns></returns>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.SetWindowsHookEx(System.Int32,GW.Function.UnmanagedFunction.Unmanaged.HookProc,System.IntPtr,System.Int32)">
            <summary>
            安装钩子的函数 
            </summary>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.UnhookWindowsHookEx(System.Int32)">
            <summary>
            卸下钩子的函数
            </summary>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.CallNextHookEx(System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            下一个钩挂的函数
            </summary>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.Keydb_event(System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            键盘消息映射
            </summary>
            <param name="bVk">虚拟键值</param>
            <param name="bScan">一般为0</param>
            <param name="dwFlags">0按下，2释放</param>
            <param name="dwExtraInfo">整数类型，一般情况下设成为0</param>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.ToAscii(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            获取Ascii码
            </summary>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.GetKeyboardState(System.Byte[])">
            <summary>
            获得所有的256个键（键盘按键、鼠标按键等等）的状态
            </summary>
            <param name="pbKeyState">指向一个256bit的数组，存放所有键的状态</param>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.PlaySound(System.String,System.UIntPtr,System.UInt32)">
            <summary>
            播放声音
            </summary>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.MciSendString(System.String,System.Text.StringBuilder,System.Int32,System.IntPtr)">
            <summary>
            控制播放
            </summary>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.SndPlaySound(System.String,System.Int64)">
            <summary>
            直接播放
            </summary>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.WaveOutGetVolume(System.UInt32,System.UInt32@)">
            <summary>
            获取系统音量
            </summary>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.WaveOutSetVolume(System.UInt32,System.UInt32)">
            <summary>
            设置系统音量
            </summary>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.InternetGetConnectedState(System.Int32,System.Int32)">
            <summary>
            获取网络连接状态
            </summary>
        </member>
        <member name="M:GW.Function.UnmanagedFunction.Unmanaged.inet_addr(System.String)">
            <summary>
            根据IP获取MAC地址用的参数
            </summary>
        </member>
        <member name="T:GW.Function.UnmanagedFunction.RECT">
            <summary>
            矩形结构体
            </summary>
        </member>
        <member name="T:GW.Function.UnmanagedFunction.PARAFORMAT2">
            <summary>
            
            </summary>
        </member>
        <member name="F:GW.Function.UnmanagedFunction.SoundFlags.SND_SYNC">
            <summary>play synchronously (default)</summary>
        </member>
        <member name="F:GW.Function.UnmanagedFunction.SoundFlags.SND_ASYNC">
            <summary>play asynchronously</summary>
        </member>
        <member name="F:GW.Function.UnmanagedFunction.SoundFlags.SND_NODEFAULT">
            <summary>silence (!default) if sound not found</summary>
        </member>
        <member name="F:GW.Function.UnmanagedFunction.SoundFlags.SND_MEMORY">
            <summary>pszSound points to a memory file</summary>
        </member>
        <member name="F:GW.Function.UnmanagedFunction.SoundFlags.SND_LOOP">
            <summary>loop the sound until next sndPlaySound</summary>
        </member>
        <member name="F:GW.Function.UnmanagedFunction.SoundFlags.SND_NOSTOP">
            <summary>don’t stop any currently playing sound</summary>
        </member>
        <member name="F:GW.Function.UnmanagedFunction.SoundFlags.SND_PURGE">
            <summary>Stop Playing Wave</summary>
        </member>
        <member name="F:GW.Function.UnmanagedFunction.SoundFlags.SND_NOWAIT">
            <summary>don’t wait if the driver is busy</summary>
        </member>
        <member name="F:GW.Function.UnmanagedFunction.SoundFlags.SND_ALIAS">
            <summary>name is a registry alias</summary>
        </member>
        <member name="F:GW.Function.UnmanagedFunction.SoundFlags.SND_ALIAS_ID">
            <summary>alias is a predefined id</summary>
        </member>
        <member name="F:GW.Function.UnmanagedFunction.SoundFlags.SND_FILENAME">
            <summary>name is file name</summary>
        </member>
        <member name="F:GW.Function.UnmanagedFunction.SoundFlags.SND_RESOURCE">
            <summary>name is resource name or atom</summary>
        </member>
        <member name="T:GW.ApiPlayer">
            <summary>
            基于系统API的声音播放器
            </summary>
        </member>
        <member name="M:GW.ApiPlayer.GetVolume">
            <summary>
            获取音量
            </summary>
        </member>
        <member name="M:GW.ApiPlayer.Play">
            <summary>
            播放声音
            </summary>
        </member>
        <member name="M:GW.ApiPlayer.Play(System.String)">
            <summary>
            播放声音
            </summary>
            <param name="sound">音频路径</param>
        </member>
        <member name="M:GW.ApiPlayer.SetSound(System.String)">
            <summary>
            设置播放文件
            </summary>
            <param name="sound">音频路径</param>
        </member>
        <member name="M:GW.ApiPlayer.SetVolume(System.Int32)">
            <summary>
            设置音量
            </summary>
        </member>
        <member name="M:GW.ApiPlayer.StopPlay">
            <summary>
            停止播放
            </summary>
        </member>
        <member name="T:GW.DxPlayer">
            <summary>
            基于DirectX组件的声音播放器
            </summary>
        </member>
        <member name="P:GW.DxPlayer.BufferPlayFlags">
            <summary>
            播放方式
            </summary>
        </member>
        <member name="M:GW.DxPlayer.#ctor(System.Windows.Forms.Control,Microsoft.DirectX.DirectSound.CooperativeLevel)">
            <summary>
            构造
            </summary>
            <param name="control">独占控件</param>
            <param name="level">优先级</param>
        </member>
        <member name="M:GW.DxPlayer.GetVolume">
            <summary>
            获取音量
            </summary>
        </member>
        <member name="M:GW.DxPlayer.Play">
            <summary>
            播放声音
            </summary>
        </member>
        <member name="M:GW.DxPlayer.Play(System.String)">
            <summary>
            播放声音
            </summary>
            <param name="sound">音频路径</param>
        </member>
        <member name="M:GW.DxPlayer.SetSound(System.String)">
            <summary>
            设置播放文件
            </summary>
            <param name="sound">音频路径</param>
        </member>
        <member name="M:GW.DxPlayer.SetVolume(System.Int32)">
            <summary>
            设置音量
            </summary>
        </member>
        <member name="M:GW.DxPlayer.StopPlay">
            <summary>
            停止播放
            </summary>
        </member>
        <member name="T:GW.IPlayer">
            <summary>
            播放器接口
            </summary>
        </member>
        <member name="M:GW.IPlayer.GetVolume">
            <summary>
            获取音量
            </summary>
        </member>
        <member name="M:GW.IPlayer.Play">
            <summary>
            播放声音
            </summary>
        </member>
        <member name="M:GW.IPlayer.Play(System.String)">
            <summary>
            播放声音
            </summary>
            <param name="sound">音频路径</param>
        </member>
        <member name="M:GW.IPlayer.SetSound(System.String)">
            <summary>
            设置播放文件
            </summary>
            <param name="sound">音频路径</param>
        </member>
        <member name="M:GW.IPlayer.SetVolume(System.Int32)">
            <summary>
            设置音量
            </summary>
        </member>
        <member name="M:GW.IPlayer.StopPlay">
            <summary>
            停止播放
            </summary>
        </member>
        <member name="T:GW.SPlayer">
            <summary>
            基于SoundPlayer的声音播放器
            </summary>
        </member>
        <member name="P:GW.SPlayer.PlayMode">
            <summary>
            设置播放模式
            </summary>
        </member>
        <member name="M:GW.SPlayer.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.SPlayer.GetVolume">
            <summary>
            获取音量
            </summary>
        </member>
        <member name="M:GW.SPlayer.Play">
            <summary>
            播放声音
            </summary>
        </member>
        <member name="M:GW.SPlayer.Play(System.String)">
            <summary>
            播放声音
            </summary>
            <param name="sound">音频路径</param>
        </member>
        <member name="M:GW.SPlayer.SetSound(System.String)">
            <summary>
            设置播放文件
            </summary>
            <param name="sound">音频路径</param>
        </member>
        <member name="M:GW.SPlayer.SetVolume(System.Int32)">
            <summary>
            设置音量
            </summary>
        </member>
        <member name="M:GW.SPlayer.StopPlay">
            <summary>
            停止播放
            </summary>
        </member>
        <member name="T:GW.PlayMode">
            <summary>
            播放模式
            </summary>
        </member>
        <member name="F:GW.PlayMode.UIPlay">
            <summary>
            UI线程播放
            </summary>
        </member>
        <member name="F:GW.PlayMode.Play">
            <summary>
            新线程播放
            </summary>
        </member>
        <member name="F:GW.PlayMode.Looping">
            <summary>
            循环播放
            </summary>
        </member>
        <member name="T:GW.Actions.Action">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`1">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`2">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`3">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`4">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`5">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`6">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`7">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`8">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`9">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`10">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`11">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`12">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`13">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`14">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`15">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`16">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`17">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`18">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`19">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Action`20">
            <summary>
            匿名无返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`1">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`2">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`3">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`4">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`5">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`6">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`7">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`8">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`9">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`10">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`11">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`12">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`13">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`14">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`15">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`16">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`17">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`18">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`19">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`20">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Actions.Func`21">
            <summary>
            匿名有返回值委托
            </summary>
        </member>
        <member name="T:GW.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:GW.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:GW.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="T:GW.Service.Base2Model.DataModel">
            <summary>
            数据实体
            </summary>
        </member>
        <member name="M:GW.Service.Base2Model.DataModel.#ctor(System.Data.DataRow,System.Data.DataColumnCollection)">
            <summary>
            构造
            </summary>
            <param name="dr">数据行</param>
            <param name="dcc">列集合</param>
        </member>
        <member name="P:GW.Service.Base2Model.DataModel.Item(System.String)">
            <summary>
            列值
            </summary>
            <param name="index">列名</param>
        </member>
        <member name="P:GW.Service.Base2Model.DataModel.Count">
            <summary>
            列数量
            </summary>
        </member>
        <member name="M:GW.Service.Base2Model.DataModel.ClearColumn(System.String)">
            <summary>
            清除列
            </summary>
            <param name="columnName">列名</param>
        </member>
        <member name="M:GW.Service.Base2Model.DataModel.GetType(System.String)">
            <summary>
            获取列类型
            </summary>
            <param name="colName">列名</param>
        </member>
        <member name="M:GW.Service.Base2Model.DataModel.GetOldValue(System.String)">
            <summary>
            获取列修改前的值（执行修改语句后，值会被更新）
            </summary>
            <param name="colName">列名</param>
        </member>
        <member name="M:GW.Service.Base2Model.DataModel.Key(System.Int32)">
            <summary>
            获取相对索引位置的列名
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:GW.Service.Base2Model.DataModel.SetType(System.Data.DataTable)">
            <summary>
            设置列类型
            </summary>
        </member>
        <member name="T:GW.Service.Base2Model.DBModel">
            <summary>
            数据库实体
            </summary>
        </member>
        <member name="M:GW.Service.Base2Model.DBModel.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Service.Base2Model.DBModel.#ctor(System.String,GW.Service.Control.DBType)">
            <summary>
            构造
            </summary>
            <param name="connectionStr">数据库连接字符串</param>
            <param name="dataType">数据库类型</param>
        </member>
        <member name="M:GW.Service.Base2Model.DBModel.#ctor(GW.Service.Control.DataBase)">
            <summary>
            构造
            </summary>
            <param name="dataBase">数据库对象</param>
        </member>
        <member name="P:GW.Service.Base2Model.DBModel.Item(System.String)">
            <summary>
            表对象
            </summary>
            <param name="index">表名</param>
        </member>
        <member name="M:GW.Service.Base2Model.DBModel.Clear">
            <summary>
            清空表集合
            </summary>
        </member>
        <member name="M:GW.Service.Base2Model.DBModel.Clear(System.String)">
            <summary>
            清除表对象
            </summary>
            <param name="index">表名</param>
        </member>
        <member name="T:GW.Service.Base2Model.TableModel">
            <summary>
            表实体
            </summary>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="name">表名</param>
        </member>
        <member name="P:GW.Service.Base2Model.TableModel.Item(System.Int32)">
            <summary>
            行数据
            </summary>
            <param name="index">行索引</param>
        </member>
        <member name="P:GW.Service.Base2Model.TableModel.Count">
            <summary>
            行数量
            </summary>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Where(System.String)">
            <summary>
            带条件的查询
            </summary>
            <param name="condition">SQL语句(where后面)</param>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Add(GW.Service.Base2Model.DataModel)">
            <summary>
            添加数据实体
            </summary>
            <param name="dm">数据实体</param>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.AddRange(System.Collections.Generic.IEnumerable{GW.Service.Base2Model.DataModel})">
            <summary>
            添加数据集
            </summary>
            <param name="dms">数据集</param>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.ClearColumn(System.String)">
            <summary>
            清除列
            </summary>
            <param name="columnName">列名</param>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Insert">
            <summary>
            插入方法
            </summary>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Insert(System.Int32)">
            <summary>
            插入方法
            </summary>
            <param name="index">行索引</param>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Insert(System.String[],System.String[])">
            <summary>
            插入方法
            </summary>
            <param name="colNames">列名集合</param>
            <param name="colValues">列值集合</param>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Update(System.Int32)">
            <summary>
            修改方法
            </summary>
            <param name="index">行索引</param>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Update(System.String)">
            <summary>
            修改方法
            </summary>
            <param name="condition">SQL语句(where后面)</param>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Update(System.Int32,System.String)">
            <summary>
            修改方法
            </summary>
            <param name="index">行索引</param>
            <param name="condition">SQL语句(where后面)</param>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Update(System.String[],System.String[],System.String)">
            <summary>
            修改方法
            </summary>
            <param name="colNames">列名集合</param>
            <param name="colValues">列值集合</param>
            <param name="condition">SQL语句(where后面)，可以为null</param>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Delete">
            <summary>
            删除方法，无条件删除所有行
            </summary>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Delete(System.Int32)">
            <summary>
            删除方法
            </summary>
            <param name="index">行索引</param>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Delete(System.String)">
            <summary>
            删除方法
            </summary>
            <param name="condition">SQL语句(where后面)</param>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Ascending(System.String)">
            <summary>
            根据某列升序排序
            </summary>
            <param name="colName">列名</param>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Descending(System.String)">
            <summary>
            根据某列降序排序
            </summary>
            <param name="colName">列名</param>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.Paging(System.Int32,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            分页查询
            </summary>
            <param name="pageIndex">页码（从1开始）</param>
            <param name="pageSize">每页数量</param>
            <param name="primaryKey">分页用的主键名</param>
            <param name="asc">是否正序排序</param>
            <param name="condition">分页条件</param>
            <returns>返回一个新的数据库映射对象</returns>
        </member>
        <member name="M:GW.Service.Base2Model.TableModel.ToDataTable">
            <summary>
            返回数据表
            </summary>
        </member>
        <member name="T:GW.Service.BllInter.IManager`1">
            <summary>
            逻辑层功能接口
            </summary>
            <typeparam name="T">泛型类，必须继承GW.Service.Model.Model</typeparam>
        </member>
        <member name="F:GW.Service.BllInter.IManager`1.server">
            <summary>
            数据访问层对象
            </summary>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Init(GW.Service.Control.DataBase)">
            <summary>
            初始化临时数据库连接
            </summary>
            <param name="db">数据库对象</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetTopCell(System.String)">
            <summary>
            查询第一行第一列
            </summary>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetTopCell(System.String,System.Int32)">
            <summary>
            查询第一行第一列
            </summary>
            <param name="sql">SQL语句</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetTopCell(System.String,System.String)">
            <summary>
            查询第一行第一列
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetTopCell(System.String,System.String,GW.Service.Control.DBType)">
            <summary>
            查询第一行第一列
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetTopCell(System.Object[])">
            <summary>
            查询第一行第一列
            </summary>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetTopCell(System.Int32,System.Object[])">
            <summary>
            查询第一行第一列
            </summary>
            <param name="conIndex">数据库对象的索引</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetTopCell(System.String,System.Object[])">
            <summary>
            查询第一行第一列
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetTopCell(System.String,GW.Service.Control.DBType,System.Object[])">
            <summary>
            查询第一行第一列
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetOne(System.String)">
            <summary>
            查询第一行
            </summary>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetOne(System.String,System.Int32)">
            <summary>
            查询第一行
            </summary>
            <param name="sql">SQL语句</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetOne(System.String,System.String)">
            <summary>
            查询第一行
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetOne(System.String,System.String,GW.Service.Control.DBType)">
            <summary>
            查询第一行
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetOne(System.Object[])">
            <summary>
            查询第一行
            </summary>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetOne(System.Int32,System.Object[])">
            <summary>
            查询第一行
            </summary>
            <param name="conIndex">数据库对象的索引</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetOne(System.String,System.Object[])">
            <summary>
            查询第一行
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetOne(System.String,GW.Service.Control.DBType,System.Object[])">
            <summary>
            查询第一行
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetOne(`0)">
            <summary>
            查询第一行
            </summary>
            <param name="model">实体类对象</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetOne(`0,System.Int32)">
            <summary>
            查询第一行
            </summary>
            <param name="model">实体类对象</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetOne(`0,System.String)">
            <summary>
            查询第一行
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetOne(`0,System.String,GW.Service.Control.DBType)">
            <summary>
            查询第一行
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetAll">
            <summary>
            查询所有
            </summary>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetAll(System.Int32)">
            <summary>
            查询所有
            </summary>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetAll(System.String)">
            <summary>
            查询所有
            </summary>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetAll(System.String,GW.Service.Control.DBType)">
            <summary>
            查询所有
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetPage(System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            分页查询
            </summary>
            <param name="pageStart">页码（从1开始）</param>
            <param name="pageSize">每页数目</param>
            <param name="isAsc">是否正序</param>
            <param name="where">分页条件（例：where 1=1）</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetPage(System.Int32,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            分页查询
            </summary>
            <param name="pageStart">页码（从1开始）</param>
            <param name="pageSize">每页数目</param>
            <param name="isAsc">是否正序</param>
            <param name="where">分页条件（例：where 1=1）</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetPage(System.Int32,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            分页查询
            </summary>
            <param name="pageStart">页码（从1开始）</param>
            <param name="pageSize">每页数目</param>
            <param name="isAsc">是否正序</param>
            <param name="where">分页条件（例：where 1=1）</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetPage(System.Int32,System.Int32,System.String,GW.Service.Control.DBType,System.Boolean,System.String)">
            <summary>
            分页查询
            </summary>
            <param name="pageStart">页码（从1开始）</param>
            <param name="pageSize">每页数目</param>
            <param name="isAsc">是否正序</param>
            <param name="where">分页条件（例：where 1=1）</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetExpand(System.String)">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetExpand(System.String,System.Int32)">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetExpand(System.String,System.String)">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetExpand(System.String,System.String,GW.Service.Control.DBType)">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetExpand(System.String,GW.Service.Parameter[])">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetExpand(System.String,GW.Service.Parameter[],System.Int32)">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetExpand(System.String,GW.Service.Parameter[],System.String)">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetExpand(System.String,GW.Service.Parameter[],System.String,GW.Service.Control.DBType)">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetExpandDS(System.String[])">
            <summary>
            查询扩展
            </summary>
            <param name="sqls">SQL语句集合</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetExpandDS(System.Int32,System.String[])">
            <summary>
            查询扩展
            </summary>
            <param name="conIndex">数据库对象的索引</param>
            <param name="sqls">SQL语句集合</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetExpandDS(System.String,System.String[])">
            <summary>
            查询扩展
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="sqls">SQL语句集合</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetExpandDS(System.String,GW.Service.Control.DBType,System.String[])">
            <summary>
            查询扩展
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
            <param name="sqls">SQL语句集合</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Insert(`0)">
            <summary>
            新增方法
            </summary>
            <param name="model">实体类对象</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Insert(`0,System.Int32)">
            <summary>
            新增方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Insert(`0,System.String)">
            <summary>
            新增方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Insert(`0,System.String,GW.Service.Control.DBType)">
            <summary>
            新增方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Insert(System.Collections.Generic.List{`0})">
            <summary>
            新增方法
            </summary>
            <param name="models">实体类集合</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Insert(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            新增方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Insert(System.Collections.Generic.List{`0},System.String)">
            <summary>
            新增方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Insert(System.Collections.Generic.List{`0},System.String,GW.Service.Control.DBType)">
            <summary>
            新增方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Update(`0)">
            <summary>
            修改方法
            </summary>
            <param name="model">实体类对象</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Update(`0,System.Int32)">
            <summary>
            修改方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Update(`0,System.String)">
            <summary>
            修改方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Update(`0,System.String,GW.Service.Control.DBType)">
            <summary>
            修改方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Update(System.Collections.Generic.List{`0})">
            <summary>
            修改方法
            </summary>
            <param name="models">实体类集合</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Update(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            修改方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Update(System.Collections.Generic.List{`0},System.String)">
            <summary>
            修改方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Update(System.Collections.Generic.List{`0},System.String,GW.Service.Control.DBType)">
            <summary>
            修改方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Delete(System.Object[])">
            <summary>
            删除方法
            </summary>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Delete(System.Int32,System.Object[])">
            <summary>
            删除方法
            </summary>
            <param name="conIndex">数据库对象的索引</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Delete(System.String,System.Object[])">
            <summary>
            删除方法
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Delete(System.String,GW.Service.Control.DBType,System.Object[])">
            <summary>
            删除方法
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Delete(`0)">
            <summary>
            删除方法
            </summary>
            <param name="model">实体类对象</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Delete(`0,System.Int32)">
            <summary>
            删除方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Delete(`0,System.String)">
            <summary>
            删除方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Delete(`0,System.String,GW.Service.Control.DBType)">
            <summary>
            删除方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Delete(System.Collections.Generic.List{`0})">
            <summary>
            删除方法
            </summary>
            <param name="models">实体类集合</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Delete(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            删除方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Delete(System.Collections.Generic.List{`0},System.String)">
            <summary>
            删除方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Delete(System.Collections.Generic.List{`0},System.String,GW.Service.Control.DBType)">
            <summary>
            删除方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.SetExpand(System.String)">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.SetExpand(System.String,System.Int32)">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.SetExpand(System.String,System.String)">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.SetExpand(System.String,System.String,GW.Service.Control.DBType)">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.SetExpand(System.String,GW.Service.Parameter[])">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.SetExpand(System.String,GW.Service.Parameter[],System.Int32)">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.SetExpand(System.String,GW.Service.Parameter[],System.String)">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.SetExpand(System.String,GW.Service.Parameter[],System.String,GW.Service.Control.DBType)">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.StoredProcedure(System.String,GW.Service.Parameter[],System.Int32[],System.Type)">
            <summary>
            执行存储过程
            </summary>
            <param name="name">存储过程名</param>
            <param name="pars">存储过程参数</param>
            <param name="outValue">存储过程带返回值的参数的索引集合</param>
            <param name="modelType">存储过程中查询结果的集合对应的实体类型</param>
            <returns>返回存储过程执行的结果，该结果为一个结果集合</returns>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.StoredProcedure(System.String,GW.Service.Parameter[],System.Int32[],System.Type,System.Int32)">
            <summary>
            执行存储过程
            </summary>
            <param name="name">存储过程名</param>
            <param name="pars">存储过程参数</param>
            <param name="outValue">存储过程带返回值的参数的索引集合</param>
            <param name="modelType">存储过程中查询结果的集合对应的实体类型</param>
            <param name="conIndex">数据库对象的索引</param>
            <returns>返回存储过程执行的结果，该结果为一个结果集合</returns>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.StoredProcedure(System.String,GW.Service.Parameter[],System.Int32[],System.Type,System.String)">
            <summary>
            执行存储过程
            </summary>
            <param name="name">存储过程名</param>
            <param name="pars">存储过程参数</param>
            <param name="outValue">存储过程带返回值的参数的索引集合</param>
            <param name="modelType">存储过程中查询结果的集合对应的实体类型</param>
            <param name="constr">数据库连接字符串</param>
            <returns>返回存储过程执行的结果，该结果为一个结果集合</returns>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.StoredProcedure(System.String,GW.Service.Parameter[],System.Int32[],System.Type,System.String,GW.Service.Control.DBType)">
            <summary>
            执行存储过程
            </summary>
            <param name="name">存储过程名</param>
            <param name="pars">存储过程参数</param>
            <param name="outValue">存储过程带返回值的参数的索引集合</param>
            <param name="modelType">存储过程中查询结果的集合对应的实体类型</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
            <returns>返回存储过程执行的结果，该结果为一个结果集合</returns>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Affair(System.String[])">
            <summary>
            使用事务执行SQL语句
            </summary>
            <param name="sqls">SQL语句</param>
            <returns>返回是否执行成功</returns>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Affair(System.String[],System.Int32)">
            <summary>
            使用事务执行SQL语句
            </summary>
            <param name="sqls">SQL语句</param>
            <param name="conIndex">数据库对象的索引</param>
            <returns>返回是否执行成功</returns>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Affair(System.String[],System.String)">
            <summary>
            使用事务执行SQL语句
            </summary>
            <param name="sqls">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
            <returns>返回是否执行成功</returns>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.Affair(System.String[],System.String,GW.Service.Control.DBType)">
            <summary>
            使用事务执行SQL语句
            </summary>
            <param name="sqls">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
            <returns>返回是否执行成功</returns>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetDataBase(System.String)">
            <summary>
            根据数据库连接字符串创建数据库对象
            </summary>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetDataBase(System.String,GW.Service.Control.DBType)">
            <summary>
            根据数据库连接字符串和数据库类型创建数据库对象
            </summary>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetProName">
            <summary>
            获取第一个属性的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetProNames">
            <summary>
            获取实体类属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetTableName">
            <summary>
            获取表名
            </summary>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetSql(System.Object[])">
            <summary>
            根据参数获取where条件
            </summary>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetSql(`0)">
            <summary>
            根据实体类获取where条件
            </summary>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetSql(System.Reflection.PropertyInfo[],`0)">
            <summary>
            根据实体类的主键属性获取where条件
            </summary>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetSqlInsert(`0,System.Collections.Generic.List{GW.Service.Parameter})">
            <summary>
            根据实体类获取Insert语句
            </summary>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetSqlUpdate(`0,System.Collections.Generic.List{GW.Service.Parameter})">
            <summary>
            根据实体类获取Update语句
            </summary>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.CheckAtribute(System.Reflection.PropertyInfo,System.String)">
            <summary>
            判断属性的特性
            </summary>
        </member>
        <member name="M:GW.Service.BllInter.IManager`1.GetValue(System.Object,System.Type)">
            <summary>
            转换SQL语句中的数据结构
            </summary>
        </member>
        <member name="T:GW.Service.Control.DataBase">
            <summary>
            数据库对象类
            </summary>
        </member>
        <member name="P:GW.Service.Control.DataBase.DBConStr">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:GW.Service.Control.DataBase.DBType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:GW.Service.Control.DataBase.StopSleep">
            <summary>
            数据库访问间歇时间，默认0
            </summary>
        </member>
        <member name="M:GW.Service.Control.DataBase.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Service.Control.DataBase.#ctor(GW.Service.Control.DBType)">
            <summary>
            构造
            </summary>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.Control.DataBase.#ctor(GW.Service.Control.DBType,System.String,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="type">数据库类型</param>
            <param name="constr">数据库连接字符串</param>
            <param name="sleep">数据库访问间歇时间</param>
        </member>
        <member name="M:GW.Service.Control.DataBase.#ctor(GW.Service.Control.DBType,System.String,System.String,System.String,System.String)">
            <summary>
            构造
            </summary>
            <param name="type">数据库类型</param>
            <param name="ip">数据库IP地址</param>
            <param name="data">数据库名称</param>
            <param name="user">数据库用户名</param>
            <param name="pass">数据库密码</param>
        </member>
        <member name="M:GW.Service.Control.DataBase.#ctor(GW.Service.Control.DBType,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="type">数据库类型</param>
            <param name="ip">数据库IP地址</param>
            <param name="data">数据库名称</param>
            <param name="user">数据库用户名</param>
            <param name="pass">数据库密码</param>
            <param name="sleep">数据库访问间歇时间</param>
        </member>
        <member name="M:GW.Service.Control.DataBase.Clone">
            <summary>
            克隆方法
            </summary>
        </member>
        <member name="T:GW.Service.Control.DBType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:GW.Service.Control.DBType.Access">
            <summary>
            Access数据库
            </summary>
        </member>
        <member name="F:GW.Service.Control.DBType.SqlServer">
            <summary>
            SqlServer数据库
            </summary>
        </member>
        <member name="F:GW.Service.Control.DBType.Oracle">
            <summary>
            Oracle数据库
            </summary>
        </member>
        <member name="F:GW.Service.Control.DBType.MySql">
            <summary>
            MySql数据库
            </summary>
        </member>
        <member name="F:GW.Service.Control.DBType.Sqlite">
            <summary>
            Sqlite数据库
            </summary>
        </member>
        <member name="T:GW.Service.Control.GlobalControl">
            <summary>
            全局控制类
            </summary>
        </member>
        <member name="F:GW.Service.Control.GlobalControl.DBConStr">
            <summary>
            数据库对象集合
            </summary>
        </member>
        <member name="F:GW.Service.Control.GlobalControl.StopSleep">
            <summary>
            系统运行间歇时间，默认为0
            </summary>
        </member>
        <member name="F:GW.Service.Control.GlobalControl.Models">
            <summary>
            实体缓存
            </summary>
        </member>
        <member name="F:GW.Service.Control.GlobalControl.IsROM">
            <summary>
            默认为false(是:读写缓存，否:直接读写数据库)
            </summary>
        </member>
        <member name="F:GW.Service.Control.GlobalControl.IsAdapter">
            <summary>
            该属性仅当IsROM为false时有效，默认为true(是:通过适配器查询，否:不通过适配器查询)
            </summary>
        </member>
        <member name="F:GW.Service.Control.GlobalControl.AppPath">
            <summary>
            当前程序所在的绝对路径(例如:C:\Application\)
            </summary>
        </member>
        <member name="F:GW.Service.Control.GlobalControl.DalName">
            <summary>
            Dal层dll文件的完整名称(例如:Dal)
            </summary>
        </member>
        <member name="F:GW.Service.Control.GlobalControl.BllName">
            <summary>
            Bll层dll文件的完整名称(例如:Bll)
            </summary>
        </member>
        <member name="F:GW.Service.Control.GlobalControl.ModelName">
            <summary>
            Model层dll文件的完整名称(例如:Model)
            </summary>
        </member>
        <member name="P:GW.Service.DalInter.IDBHelper.Con">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="P:GW.Service.DalInter.IDBHelper.Cmd">
            <summary>
            数据库执行对象
            </summary>
        </member>
        <member name="P:GW.Service.DalInter.IDBHelper.Da">
            <summary>
            适配器对象
            </summary>
        </member>
        <member name="P:GW.Service.DalInter.IDBHelper.Dr">
            <summary>
            数据访问对象
            </summary>
        </member>
        <member name="M:GW.Service.DalInter.IDBHelper.InitPars(GW.Service.Parameter[])">
            <summary>
            初始化SQL语句参数
            </summary>
            <param name="pars">SQL语句参数集合</param>
        </member>
        <member name="M:GW.Service.DalInter.IDBHelper.InitDr">
            <summary>
            执行SQL语句，获得DataReader对象
            </summary>
        </member>
        <member name="T:GW.Service.DalInter.IService`1">
            <summary>
            数据库服务接口
            </summary>
            <typeparam name="T">泛型类，必须继承GW.Service.Model.Model</typeparam>
        </member>
        <member name="F:GW.Service.DalInter.IService`1.CustomSelectDR">
            <summary>
            自定义查询
            </summary>
        </member>
        <member name="F:GW.Service.DalInter.IService`1.CustomSelectDS">
            <summary>
            自定义查询
            </summary>
        </member>
        <member name="M:GW.Service.DalInter.IService`1.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Service.DalInter.IService`1.AddSql(System.String,GW.Service.Parameter[])">
            <summary>
            设置SQL语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">SQL语句参数</param>
        </member>
        <member name="M:GW.Service.DalInter.IService`1.AddDataBase(System.Int32)">
            <summary>
            选择数据库
            </summary>
            <param name="conIndex">数据库预设置的索引</param>
        </member>
        <member name="M:GW.Service.DalInter.IService`1.AddDataBase(GW.Service.Control.DataBase)">
            <summary>
            设置临时数据库
            </summary>
            <param name="db">数据库对象</param>
        </member>
        <member name="M:GW.Service.DalInter.IService`1.GetOne">
            <summary>
            获取第一个结果
            </summary>
        </member>
        <member name="M:GW.Service.DalInter.IService`1.Get">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="M:GW.Service.DalInter.IService`1.Gets(System.String[])">
            <summary>
            获取数据集
            </summary>
        </member>
        <member name="M:GW.Service.DalInter.IService`1.Set">
            <summary>
            设置数据
            </summary>
        </member>
        <member name="M:GW.Service.DalInter.IService`1.StoredProcedure(System.Int32[],System.Type)">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:GW.Service.DalInter.IService`1.Affair(System.String[])">
            <summary>
            使用事务执行SQL语句
            </summary>
            <param name="sqls">SQL语句</param>
            <returns>返回是否执行成功</returns>
        </member>
        <member name="T:GW.Service.IDataBaseMethod`1">
            <summary>
             数据库功能接口
            </summary>
            <typeparam name="T">泛型类，必须继承GW.Service.Model.Model</typeparam>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Init(GW.Service.Control.DataBase)">
            <summary>
            初始化临时数据库连接
            </summary>
            <param name="db">数据库对象</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetTopCell(System.String)">
            <summary>
            查询第一行第一列
            </summary>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetTopCell(System.String,System.Int32)">
            <summary>
            查询第一行第一列
            </summary>
            <param name="sql">SQL语句</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetTopCell(System.String,System.String)">
            <summary>
            查询第一行第一列
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetTopCell(System.String,System.String,GW.Service.Control.DBType)">
            <summary>
            查询第一行第一列
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetTopCell(System.Object[])">
            <summary>
            查询第一行第一列
            </summary>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetTopCell(System.Int32,System.Object[])">
            <summary>
            查询第一行第一列
            </summary>
            <param name="conIndex">数据库对象的索引</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetTopCell(System.String,System.Object[])">
            <summary>
            查询第一行第一列
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetTopCell(System.String,GW.Service.Control.DBType,System.Object[])">
            <summary>
            查询第一行第一列
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetOne(System.String)">
            <summary>
            查询第一行
            </summary>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetOne(System.String,System.Int32)">
            <summary>
            查询第一行
            </summary>
            <param name="sql">SQL语句</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetOne(System.String,System.String)">
            <summary>
            查询第一行
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetOne(System.String,System.String,GW.Service.Control.DBType)">
            <summary>
            查询第一行
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetOne(System.Object[])">
            <summary>
            查询第一行
            </summary>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetOne(System.Int32,System.Object[])">
            <summary>
            查询第一行
            </summary>
            <param name="conIndex">数据库对象的索引</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetOne(System.String,System.Object[])">
            <summary>
            查询第一行
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetOne(System.String,GW.Service.Control.DBType,System.Object[])">
            <summary>
            查询第一行
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetOne(`0)">
            <summary>
            查询第一行
            </summary>
            <param name="model">实体类对象</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetOne(`0,System.Int32)">
            <summary>
            查询第一行
            </summary>
            <param name="model">实体类对象</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetOne(`0,System.String)">
            <summary>
            查询第一行
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetOne(`0,System.String,GW.Service.Control.DBType)">
            <summary>
            查询第一行
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetAll">
            <summary>
            查询所有
            </summary>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetAll(System.Int32)">
            <summary>
            查询所有
            </summary>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetAll(System.String)">
            <summary>
            查询所有
            </summary>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetAll(System.String,GW.Service.Control.DBType)">
            <summary>
            查询所有
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetPage(System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            分页查询
            </summary>
            <param name="pageStart">页码（从1开始）</param>
            <param name="pageSize">每页数目</param>
            <param name="isAsc">是否正序</param>
            <param name="where">分页条件（例：where 1=1）</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetPage(System.Int32,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            分页查询
            </summary>
            <param name="pageStart">页码（从1开始）</param>
            <param name="pageSize">每页数目</param>
            <param name="isAsc">是否正序</param>
            <param name="where">分页条件（例：where 1=1）</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetPage(System.Int32,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            分页查询
            </summary>
            <param name="pageStart">页码（从1开始）</param>
            <param name="pageSize">每页数目</param>
            <param name="isAsc">是否正序</param>
            <param name="where">分页条件（例：where 1=1）</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetPage(System.Int32,System.Int32,System.String,GW.Service.Control.DBType,System.Boolean,System.String)">
            <summary>
            分页查询
            </summary>
            <param name="pageStart">页码（从1开始）</param>
            <param name="pageSize">每页数目</param>
            <param name="isAsc">是否正序</param>
            <param name="where">分页条件（例：where 1=1）</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetExpand(System.String)">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetExpand(System.String,System.Int32)">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetExpand(System.String,System.String)">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetExpand(System.String,System.String,GW.Service.Control.DBType)">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetExpand(System.String,GW.Service.Parameter[])">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetExpand(System.String,GW.Service.Parameter[],System.Int32)">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetExpand(System.String,GW.Service.Parameter[],System.String)">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetExpand(System.String,GW.Service.Parameter[],System.String,GW.Service.Control.DBType)">
            <summary>
            查询扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetExpandDS(System.String[])">
            <summary>
            查询扩展
            </summary>
            <param name="sqls">SQL语句集合</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetExpandDS(System.Int32,System.String[])">
            <summary>
            查询扩展
            </summary>
            <param name="conIndex">数据库对象的索引</param>
            <param name="sqls">SQL语句集合</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetExpandDS(System.String,System.String[])">
            <summary>
            查询扩展
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="sqls">SQL语句集合</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.GetExpandDS(System.String,GW.Service.Control.DBType,System.String[])">
            <summary>
            查询扩展
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
            <param name="sqls">SQL语句集合</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Insert(`0)">
            <summary>
            新增方法
            </summary>
            <param name="model">实体类对象</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Insert(`0,System.Int32)">
            <summary>
            新增方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Insert(`0,System.String)">
            <summary>
            新增方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Insert(`0,System.String,GW.Service.Control.DBType)">
            <summary>
            新增方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Insert(System.Collections.Generic.List{`0})">
            <summary>
            新增方法
            </summary>
            <param name="models">实体类集合</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Insert(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            新增方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Insert(System.Collections.Generic.List{`0},System.String)">
            <summary>
            新增方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Insert(System.Collections.Generic.List{`0},System.String,GW.Service.Control.DBType)">
            <summary>
            新增方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Update(`0)">
            <summary>
            修改方法
            </summary>
            <param name="model">实体类对象</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Update(`0,System.Int32)">
            <summary>
            修改方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Update(`0,System.String)">
            <summary>
            修改方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Update(`0,System.String,GW.Service.Control.DBType)">
            <summary>
            修改方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Update(System.Collections.Generic.List{`0})">
            <summary>
            修改方法
            </summary>
            <param name="models">实体类集合</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Update(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            修改方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Update(System.Collections.Generic.List{`0},System.String)">
            <summary>
            修改方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Update(System.Collections.Generic.List{`0},System.String,GW.Service.Control.DBType)">
            <summary>
            修改方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Delete(System.Object[])">
            <summary>
            删除方法
            </summary>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Delete(System.Int32,System.Object[])">
            <summary>
            删除方法
            </summary>
            <param name="conIndex">数据库对象的索引</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Delete(System.String,System.Object[])">
            <summary>
            删除方法
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Delete(System.String,GW.Service.Control.DBType,System.Object[])">
            <summary>
            删除方法
            </summary>
            <param name="constr">数据库连接字符串</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Delete(`0)">
            <summary>
            删除方法
            </summary>
            <param name="model">实体类对象</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Delete(`0,System.Int32)">
            <summary>
            删除方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Delete(`0,System.String)">
            <summary>
            删除方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Delete(`0,System.String,GW.Service.Control.DBType)">
            <summary>
            删除方法
            </summary>
            <param name="model">实体类对象</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Delete(System.Collections.Generic.List{`0})">
            <summary>
            删除方法
            </summary>
            <param name="models">实体类集合</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Delete(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            删除方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Delete(System.Collections.Generic.List{`0},System.String)">
            <summary>
            删除方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Delete(System.Collections.Generic.List{`0},System.String,GW.Service.Control.DBType)">
            <summary>
            删除方法
            </summary>
            <param name="models">实体类集合</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.SetExpand(System.String)">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.SetExpand(System.String,System.Int32)">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.SetExpand(System.String,System.String)">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.SetExpand(System.String,System.String,GW.Service.Control.DBType)">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.SetExpand(System.String,GW.Service.Parameter[])">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.SetExpand(System.String,GW.Service.Parameter[],System.Int32)">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
            <param name="conIndex">数据库对象的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.SetExpand(System.String,GW.Service.Parameter[],System.String)">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
            <param name="constr">数据库连接字符串</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.SetExpand(System.String,GW.Service.Parameter[],System.String,GW.Service.Control.DBType)">
            <summary>
            增删改扩展
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">参数</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.StoredProcedure(System.String,GW.Service.Parameter[],System.Int32[],System.Type)">
            <summary>
            执行存储过程
            </summary>
            <param name="name">存储过程名</param>
            <param name="pars">存储过程参数</param>
            <param name="outValue">存储过程带返回值的参数的索引集合</param>
            <param name="modelType">存储过程中查询结果的集合对应的实体类型</param>
            <returns>返回存储过程执行的结果，该结果为一个结果集合</returns>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.StoredProcedure(System.String,GW.Service.Parameter[],System.Int32[],System.Type,System.Int32)">
            <summary>
            执行存储过程
            </summary>
            <param name="name">存储过程名</param>
            <param name="pars">存储过程参数</param>
            <param name="outValue">存储过程带返回值的参数的索引集合</param>
            <param name="modelType">存储过程中查询结果的集合对应的实体类型</param>
            <param name="conIndex">数据库对象的索引</param>
            <returns>返回存储过程执行的结果，该结果为一个结果集合</returns>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.StoredProcedure(System.String,GW.Service.Parameter[],System.Int32[],System.Type,System.String)">
            <summary>
            执行存储过程
            </summary>
            <param name="name">存储过程名</param>
            <param name="pars">存储过程参数</param>
            <param name="outValue">存储过程带返回值的参数的索引集合</param>
            <param name="modelType">存储过程中查询结果的集合对应的实体类型</param>
            <param name="constr">数据库连接字符串</param>
            <returns>返回存储过程执行的结果，该结果为一个结果集合</returns>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.StoredProcedure(System.String,GW.Service.Parameter[],System.Int32[],System.Type,System.String,GW.Service.Control.DBType)">
            <summary>
            执行存储过程
            </summary>
            <param name="name">存储过程名</param>
            <param name="pars">存储过程参数</param>
            <param name="outValue">存储过程带返回值的参数的索引集合</param>
            <param name="modelType">存储过程中查询结果的集合对应的实体类型</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
            <returns>返回存储过程执行的结果，该结果为一个结果集合</returns>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Affair(System.String[])">
            <summary>
            使用事务执行SQL语句
            </summary>
            <param name="sqls">SQL语句</param>
            <returns>返回是否执行成功</returns>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Affair(System.String[],System.Int32)">
            <summary>
            使用事务执行SQL语句
            </summary>
            <param name="sqls">SQL语句</param>
            <param name="conIndex">数据库对象的索引</param>
            <returns>返回是否执行成功</returns>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Affair(System.String[],System.String)">
            <summary>
            使用事务执行SQL语句
            </summary>
            <param name="sqls">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
            <returns>返回是否执行成功</returns>
        </member>
        <member name="M:GW.Service.IDataBaseMethod`1.Affair(System.String[],System.String,GW.Service.Control.DBType)">
            <summary>
            使用事务执行SQL语句
            </summary>
            <param name="sqls">SQL语句</param>
            <param name="constr">数据库连接字符串</param>
            <param name="type">数据库类型</param>
            <returns>返回是否执行成功</returns>
        </member>
        <member name="T:GW.Service.IDataBaseService`1">
            <summary>
            数据库功能接口
            </summary>
            <typeparam name="T">泛型类，必须继承GW.Service.Model.Model</typeparam>
        </member>
        <member name="M:GW.Service.IDataBaseService`1.AddSql(System.String,GW.Service.Parameter[])">
            <summary>
            设置SQL语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pars">SQL语句参数</param>
        </member>
        <member name="M:GW.Service.IDataBaseService`1.AddDataBase(System.Int32)">
            <summary>
            选择数据库
            </summary>
            <param name="conIndex">数据库预设置的索引</param>
        </member>
        <member name="M:GW.Service.IDataBaseService`1.AddDataBase(GW.Service.Control.DataBase)">
            <summary>
            设置临时数据库
            </summary>
            <param name="db">数据库对象</param>
        </member>
        <member name="M:GW.Service.IDataBaseService`1.GetOne">
            <summary>
            获取第一个结果
            </summary>
        </member>
        <member name="M:GW.Service.IDataBaseService`1.Get">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="M:GW.Service.IDataBaseService`1.Gets(System.String[])">
            <summary>
            获取数据集
            </summary>
        </member>
        <member name="M:GW.Service.IDataBaseService`1.Set">
            <summary>
            设置数据
            </summary>
        </member>
        <member name="M:GW.Service.IDataBaseService`1.StoredProcedure(System.Int32[],System.Type)">
            <summary>
            执行存储过程
            </summary>
            <param name="outValue">存储过程带返回值的参数的索引集合</param>
            <param name="modelType">存储过程中查询结果的集合对应的实体类型</param>
        </member>
        <member name="M:GW.Service.IDataBaseService`1.Affair(System.String[])">
            <summary>
            使用事务执行SQL语句
            </summary>
            <param name="sqls">SQL语句</param>
            <returns>返回是否执行成功</returns>
        </member>
        <member name="T:GW.Service.Model.ModelAtribute">
            <summary>
            实体特性类
            </summary>
        </member>
        <member name="P:GW.Service.Model.ModelAtribute.PrimaryKey">
            <summary>
            是否是主键
            </summary>
        </member>
        <member name="P:GW.Service.Model.ModelAtribute.ForeignKey">
            <summary>
            是否是外键
            </summary>
        </member>
        <member name="P:GW.Service.Model.ModelAtribute.AutoIncrease">
            <summary>
            是否是自动增长
            </summary>
        </member>
        <member name="P:GW.Service.Model.ModelAtribute.NoColumn">
            <summary>
            是否为非数据表列 
            </summary>
        </member>
        <member name="T:GW.Service.Model.Model">
            <summary>
            实体超类
            </summary>
        </member>
        <member name="F:GW.Service.Model.Model.ClassKey">
            <summary>
            实体类的键
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.#ctor(System.String,System.Object[])">
            <summary>
            构造
            </summary>
            <param name="propertyNames">属性名("属性1,属性2,..,属性n")</param>
            <param name="propertys">属性值集合</param>
        </member>
        <member name="E:GW.Service.Model.Model.ToModel">
            <summary>
            类型转换事件
            </summary>
        </member>
        <member name="E:GW.Service.Model.Model.PlusModel">
            <summary>
            实体相加事件
            </summary>
        </member>
        <member name="E:GW.Service.Model.Model.ReduceModel">
            <summary>
            实体相减事件
            </summary>
        </member>
        <member name="E:GW.Service.Model.Model.RideModel">
            <summary>
            实体相乘事件
            </summary>
        </member>
        <member name="E:GW.Service.Model.Model.ExceptModel">
            <summary>
            实体相除事件
            </summary>
        </member>
        <member name="E:GW.Service.Model.Model.RemainderModel">
            <summary>
            实体取余事件
            </summary>
        </member>
        <member name="E:GW.Service.Model.Model.EquivalenceComparison">
            <summary>
            等值比较事件
            </summary>
        </member>
        <member name="E:GW.Service.Model.Model.NotEquivalenceComparison">
            <summary>
            不等值比较事件
            </summary>
        </member>
        <member name="E:GW.Service.Model.Model.GreaterThan">
            <summary>
            大于
            </summary>
        </member>
        <member name="E:GW.Service.Model.Model.LessThan">
            <summary>
            小于
            </summary>
        </member>
        <member name="E:GW.Service.Model.Model.GreaterThanOrEqualTo">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="E:GW.Service.Model.Model.LessThanOrEqualTo">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.Clone">
            <summary>
            完全深表克隆，不支持两个类以上的嵌套克隆
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.Clones(System.Object)">
            <summary>
            完全深表克隆，不支持两个类以上的嵌套克隆
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.CloneT``1(System.Object[],System.Object)">
            <summary>
            泛型集合克隆方法
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.Equals(System.Object)">
            <summary>
            确定指定的 System.Object 是否等于当前的 System.Object。
            </summary>
            <param name="obj">与当前的 System.Object 进行比较的 System.Object。</param>
            <returns>如果指定的 System.Object 等于当前的 System.Object，则为 true；否则为 false。</returns>
        </member>
        <member name="M:GW.Service.Model.Model.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>当前 System.Object 的哈希代码。</returns>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.String)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.Text.StringBuilder)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.Int16)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.UInt16)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.Int32)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.UInt32)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.Int64)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.UInt64)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.Boolean)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.Single)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.Double)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.Decimal)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.DateTime)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.Char)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.Byte)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.SByte)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.Enum)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.Data.DataTable)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Implicit(System.Array)~GW.Service.Model.Model">
            <summary>
            赋值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Addition(System.Object,GW.Service.Model.Model)">
            <summary>
            加值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Addition(GW.Service.Model.Model,System.Object)">
            <summary>
            加值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Subtraction(System.Object,GW.Service.Model.Model)">
            <summary>
            减值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Subtraction(GW.Service.Model.Model,System.Object)">
            <summary>
            减值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Multiply(System.Object,GW.Service.Model.Model)">
            <summary>
            乘值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Multiply(GW.Service.Model.Model,System.Object)">
            <summary>
            乘值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Division(System.Object,GW.Service.Model.Model)">
            <summary>
            除值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Division(GW.Service.Model.Model,System.Object)">
            <summary>
            除值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Modulus(System.Object,GW.Service.Model.Model)">
            <summary>
            余值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Modulus(GW.Service.Model.Model,System.Object)">
            <summary>
            余值
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Equality(System.Object,GW.Service.Model.Model)">
            <summary>
            等值判断
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Equality(GW.Service.Model.Model,System.Object)">
            <summary>
            等值判断
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Inequality(System.Object,GW.Service.Model.Model)">
            <summary>
            不等值判断
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_Inequality(GW.Service.Model.Model,System.Object)">
            <summary>
            不等值判断
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_GreaterThan(System.Object,GW.Service.Model.Model)">
            <summary>
            大于
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_GreaterThan(GW.Service.Model.Model,System.Object)">
            <summary>
            大于
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_LessThan(System.Object,GW.Service.Model.Model)">
            <summary>
            小于
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_LessThan(GW.Service.Model.Model,System.Object)">
            <summary>
            小于
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_GreaterThanOrEqual(System.Object,GW.Service.Model.Model)">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_GreaterThanOrEqual(GW.Service.Model.Model,System.Object)">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_LessThanOrEqual(System.Object,GW.Service.Model.Model)">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="M:GW.Service.Model.Model.op_LessThanOrEqual(GW.Service.Model.Model,System.Object)">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="T:GW.Service.Model.DataType">
            <summary>
            数据类型枚举
            </summary>
        </member>
        <member name="T:GW.Service.Parameter">
            <summary>
            SQL语句参数
            </summary>
        </member>
        <member name="M:GW.Service.Parameter.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.Service.Parameter.#ctor(System.String,System.Object)">
            <summary>
            构造
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="P:GW.Service.Parameter.Name">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:GW.Service.Parameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:GW.TCPIP.Client.Clients">
            <summary>
            客户端
            </summary>
        </member>
        <member name="M:GW.TCPIP.Client.Clients.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.TCPIP.Client.Clients.#ctor(System.String,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="ip">服务器IP地址</param>
            <param name="port">服务器端口号</param>
        </member>
        <member name="M:GW.TCPIP.Client.Clients.#ctor(System.String,System.Int32,GW.Actions.Func{System.String,System.Boolean},GW.Actions.Action{System.String})">
            <summary>
            构造
            </summary>
            <param name="ip">服务器IP地址</param>
            <param name="port">服务器端口号</param>
            <param name="checkEndPoint">验证数据的结束点标示事件</param>
            <param name="getMessage">获取服务端返回的数据事件</param>
        </member>
        <member name="M:GW.TCPIP.Client.Clients.#ctor(System.String,System.Int32,System.String,GW.Actions.Func{System.String,System.Boolean},GW.Actions.Action{System.String})">
            <summary>
            构造
            </summary>
            <param name="ip">服务器IP地址</param>
            <param name="port">服务器端口号</param>
            <param name="end">发送给服务器端时的结束点标记</param>
            <param name="checkEndPoint">验证数据的结束点标示事件</param>
            <param name="getMessage">获取服务端返回的数据事件</param>
        </member>
        <member name="P:GW.TCPIP.Client.Clients.Ip">
            <summary>
            服务器IP地址
            </summary>
        </member>
        <member name="P:GW.TCPIP.Client.Clients.Port">
            <summary>
            服务器端口号
            </summary>
        </member>
        <member name="P:GW.TCPIP.Client.Clients.End">
            <summary>
            结束点标记
            </summary>
        </member>
        <member name="E:GW.TCPIP.Client.Clients.CheckEndPoint">
            <summary>
            验证数据的结束点标示事件
            </summary>
        </member>
        <member name="E:GW.TCPIP.Client.Clients.GetMessage">
            <summary>
            获取服务端返回的数据事件
            </summary>
        </member>
        <member name="M:GW.TCPIP.Client.Clients.LinkStart">
            <summary>
            开始连接服务器
            </summary>
        </member>
        <member name="M:GW.TCPIP.Client.Clients.LinkOut">
            <summary>
            终止连接
            </summary>
        </member>
        <member name="M:GW.TCPIP.Client.Clients.Send(System.String)">
            <summary>
            数据交互
            </summary>
            <param name="data">发送的数据</param>
        </member>
        <member name="T:GW.TCPIP.Control">
            <summary>
            数据传输控制类
            </summary>
        </member>
        <member name="F:GW.TCPIP.Control.number">
            <summary>
            设置服务端信息提示的起始序号(默认0)
            </summary>
        </member>
        <member name="F:GW.TCPIP.Control.ByteSize">
            <summary>
            设置数据传输的包大小(默认1KB)
            </summary>
        </member>
        <member name="T:GW.TCPIP.Server.Servers">
            <summary>
            服务端
            </summary>
        </member>
        <member name="M:GW.TCPIP.Server.Servers.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.TCPIP.Server.Servers.#ctor(System.String,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="ip">服务端的IP</param>
            <param name="port">服务端的端口号</param>
        </member>
        <member name="M:GW.TCPIP.Server.Servers.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="ip">服务端的IP</param>
            <param name="port">服务端的端口号</param>
            <param name="count">连接池总数</param>
        </member>
        <member name="M:GW.TCPIP.Server.Servers.#ctor(System.String,System.Int32,System.Int32,GW.Actions.Action{System.String},GW.Actions.Func{System.String,System.Boolean},GW.Actions.Func{System.String,System.String})">
            <summary>
            构造
            </summary>
            <param name="ip">服务端的IP</param>
            <param name="port">服务端的端口号</param>
            <param name="count">连接池总数</param>
            <param name="serverMessage">服务启动后的执行结果事件</param>
            <param name="checkEndPoint">验证数据的结束点标示事件</param>
            <param name="handlerData">服务端数据处理事件</param>
        </member>
        <member name="M:GW.TCPIP.Server.Servers.#ctor(System.String,System.Int32,System.Int32,System.String,GW.Actions.Action{System.String},GW.Actions.Func{System.String,System.Boolean},GW.Actions.Func{System.String,System.String})">
            <summary>
            构造
            </summary>
            <param name="ip">服务端的IP</param>
            <param name="port">服务端的端口号</param>
            <param name="count">连接池总数</param>
            <param name="end">回应客户端时的结束点标记(Java必须为\r\n)</param>
            <param name="serverMessage">服务启动后的执行结果事件</param>
            <param name="checkEndPoint">验证数据的结束点标示事件</param>
            <param name="handlerData">服务端数据处理事件</param>
        </member>
        <member name="P:GW.TCPIP.Server.Servers.Ip">
            <summary>
            服务端的IP
            </summary>
        </member>
        <member name="P:GW.TCPIP.Server.Servers.Port">
            <summary>
            服务端的端口号
            </summary>
        </member>
        <member name="P:GW.TCPIP.Server.Servers.Count">
            <summary>
            连接池总数
            </summary>
        </member>
        <member name="P:GW.TCPIP.Server.Servers.End">
            <summary>
            结束点标记
            </summary>
        </member>
        <member name="P:GW.TCPIP.Server.Servers.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="E:GW.TCPIP.Server.Servers.ServerMessage">
            <summary>
            服务启动后的执行结果事件
            </summary>
        </member>
        <member name="E:GW.TCPIP.Server.Servers.CheckEndPoint">
            <summary>
            验证数据的结束点标示事件
            </summary>
        </member>
        <member name="E:GW.TCPIP.Server.Servers.HandlerData">
            <summary>
            服务端数据处理事件
            </summary>
        </member>
        <member name="M:GW.TCPIP.Server.Servers.ServerStart">
            <summary>
            启动服务
            </summary>
            <returns>是否启动成功</returns>
        </member>
        <member name="M:GW.TCPIP.Server.Servers.ServerStop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:GW.TCPIP.Server.Servers.SetEvent(GW.Actions.Action{System.String},GW.Actions.Func{System.String,System.Boolean},GW.Actions.Func{System.String,System.String})">
            <summary>
            设置必要事件函数
            </summary>
            <param name="serverMessage">服务启动后的执行结果事件</param>
            <param name="checkEndPoint">验证数据的结束点标示事件</param>
            <param name="handlerData">服务端数据处理事件</param>
        </member>
        <member name="M:GW.TCPIP.Server.Servers.Push(System.String)">
            <summary>
            主动推送
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="M:GW.TCPIP.Server.Servers.Push(System.String,System.Int32)">
            <summary>
            主动推送
            </summary>
            <param name="msg">消息</param>
            <param name="clientKey">客户端连接编号</param>
        </member>
        <member name="F:GW.TCPIP.StateObject.number">
            <summary>
            客户端执行序号
            </summary>
        </member>
        <member name="F:GW.TCPIP.StateObject.workSocket">
            <summary>
            客户端socket对象
            </summary>
        </member>
        <member name="F:GW.TCPIP.StateObject.buffer">
            <summary>
            接受的数据
            </summary>
        </member>
        <member name="F:GW.TCPIP.StateObject.sb">
            <summary>
            存储的数据
            </summary>
        </member>
        <member name="T:GW.TreeNetwork.ITreeNode">
            <summary>
            树形网络接口
            </summary>
        </member>
        <member name="M:GW.TreeNetwork.ITreeNode.AddEvent(GW.TreeNetwork.ITreeNode)">
            <summary>
            发生新节点时的事件
            </summary>
            <param name="newTreeNode">新节点</param>
        </member>
        <member name="M:GW.TreeNetwork.ITreeNode.DownMsg">
            <summary>
            向下推送
            </summary>
            <returns>返回是否推送成功</returns>
        </member>
        <member name="M:GW.TreeNetwork.ITreeNode.GetParentNode">
            <summary>
            获取父级节点
            </summary>
            <returns>返回父级节点</returns>
        </member>
        <member name="M:GW.TreeNetwork.ITreeNode.GetTreeNode(System.String)">
            <summary>
            获取节点（实现时可调用TreeNetWork.CheckTreeNode）
            </summary>
            <param name="treeNodeName">节点名称</param>
            <returns>返回树形网络节点</returns>
        </member>
        <member name="M:GW.TreeNetwork.ITreeNode.GetTreeNodeName">
            <summary>
            获取当前节点名称
            </summary>
            <returns>返回当前节点名称</returns>
        </member>
        <member name="M:GW.TreeNetwork.ITreeNode.LoadMsg(System.Object,GW.TreeNetwork.ITreeNode)">
            <summary>
            下载信息
            </summary>
            <param name="msg">信息体</param>
            <param name="fromTreeNode">来源</param>
            <returns>返回是否接收成功</returns>
        </member>
        <member name="M:GW.TreeNetwork.ITreeNode.RemoveEvent(GW.TreeNetwork.ITreeNode)">
            <summary>
            消除已有节点时事件
            </summary>
            <param name="oldTreeNode">已有节点</param>
        </member>
        <member name="M:GW.TreeNetwork.ITreeNode.SendMsg(System.Object,GW.TreeNetwork.ITreeNode[])">
            <summary>
            上传信息（实现时可调用TreeNetWork.SendMsg）
            </summary>
            <param name="msg">信息体</param>
            <param name="toTreeNodes">发送目标</param>
            <returns>返回是否发送成功</returns>
        </member>
        <member name="M:GW.TreeNetwork.ITreeNode.SetParentNode(GW.TreeNetwork.ITreeNode)">
            <summary>
            设置父级节点
            </summary>
            <param name="parentNode">父级节点</param>
        </member>
        <member name="M:GW.TreeNetwork.ITreeNode.SetTreeNodeName(System.String)">
            <summary>
            设置节点名称
            </summary>
            <param name="treeNodeName">节点名称</param>
        </member>
        <member name="T:GW.TreeNetwork.TreeNetWork">
            <summary>
            树形网络
            </summary>
        </member>
        <member name="M:GW.TreeNetwork.TreeNetWork.AddTreeNode(GW.TreeNetwork.ITreeNode,GW.TreeNetwork.ITreeNode)">
            <summary>
            添加节点
            </summary>
            <param name="treeNode">节点</param>
            <param name="parentNode">父级节点</param>
        </member>
        <member name="M:GW.TreeNetwork.TreeNetWork.GetTreeNodeForName(System.String)">
            <summary>
            获取节点
            </summary>
            <param name="treeNodeName">节点名称</param>
            <returns>返回树形网络节点</returns>
        </member>
        <member name="M:GW.TreeNetwork.TreeNetWork.RemoveTreeNode(GW.TreeNetwork.ITreeNode)">
            <summary>
            移除节点
            </summary>
            <param name="treeNode">节点</param>
        </member>
        <member name="M:GW.TreeNetwork.TreeNetWork.SendMsg(System.Object,GW.TreeNetwork.ITreeNode,GW.TreeNetwork.ITreeNode[])">
            <summary>
            上传信息
            </summary>
            <param name="msg">信息体</param>
            <param name="fromTreeNode">来源</param>
            <param name="toTreeNodes">发送目标</param>
            <returns>返回是否发送成功</returns>
        </member>
        <member name="M:GW.XML.IXMLToList.SetProperty(GW.XML.XmlModel)">
            <summary>
            根据XML设置当前对象的属性
            </summary>
            <param name="xml">XML对象</param>
        </member>
        <member name="M:GW.XML.IXMLToList.GetXml">
            <summary>
            根据当前对象生成XmlModel对象
            </summary>
        </member>
        <member name="T:GW.XML.XmlModel">
            <summary>
            XML算法类
            </summary>
        </member>
        <member name="F:GW.XML.XmlModel.xmlTitle">
            <summary>
            &lt;?xml version="1.0" encoding="{0}" ?&gt;
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.#ctor(System.String,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="xml">XML路径或XML字符串</param>
            <param name="isPath">前一个参数是否是XML路径</param>
        </member>
        <member name="P:GW.XML.XmlModel.IsCreateCommentNodes">
            <summary>
            是否生成注释节点（默认true）
            </summary>
        </member>
        <member name="P:GW.XML.XmlModel.AttributeCount">
            <summary>
            该节点属性的数量
            </summary>
        </member>
        <member name="P:GW.XML.XmlModel.BrotherCount">
            <summary>
            兄弟节点数量
            </summary>
        </member>
        <member name="P:GW.XML.XmlModel.ChildrenCount">
            <summary>
            子节点数量
            </summary>
        </member>
        <member name="P:GW.XML.XmlModel.Name">
            <summary>
            该节点名称
            </summary>
        </member>
        <member name="P:GW.XML.XmlModel.InnerText">
            <summary>
            节点内容
            </summary>
        </member>
        <member name="P:GW.XML.XmlModel.InnerXml">
            <summary>
            节点XML结构
            </summary>
        </member>
        <member name="P:GW.XML.XmlModel.Xml">
            <summary>
            获取或设置XML字符串
            </summary>
        </member>
        <member name="P:GW.XML.XmlModel.DataBind">
            <summary>
            绑定的数据
            </summary>
        </member>
        <member name="P:GW.XML.XmlModel.Parent">
            <summary>
            父节点对象
            </summary>
        </member>
        <member name="P:GW.XML.XmlModel.Item(System.Int32)">
            <summary>
            索引器，获取兄弟节点对象
            </summary>
        </member>
        <member name="P:GW.XML.XmlModel.Item(System.String)">
            <summary>
            索引器，获取子节点对象
            </summary>
        </member>
        <member name="F:GW.XML.XmlModel.isCreateCommentNodes">
            <summary>
            是否生成注释节点（默认true）
            </summary>
        </member>
        <member name="F:GW.XML.XmlModel.name">
            <summary>
            该节点名称
            </summary>
        </member>
        <member name="F:GW.XML.XmlModel.innerText">
            <summary>
            节点内容
            </summary>
        </member>
        <member name="F:GW.XML.XmlModel.dataBind">
            <summary>
            绑定的数据
            </summary>
        </member>
        <member name="F:GW.XML.XmlModel.parent">
            <summary>
            父节点对象
            </summary>
        </member>
        <member name="F:GW.XML.XmlModel.sort">
            <summary>
            排序委托
            </summary>
        </member>
        <member name="F:GW.XML.XmlModel.attributeContents">
            <summary>
            该节点属性集合
            </summary>
        </member>
        <member name="F:GW.XML.XmlModel.brothers">
            <summary>
            兄弟节点集合
            </summary>
        </member>
        <member name="F:GW.XML.XmlModel.childrenModels">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="F:GW.XML.XmlModel.attributes">
            <summary>
            该节点属性集合
            </summary>
        </member>
        <member name="F:GW.XML.XmlModel.childrens">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.InitXml(System.String)">
            <summary>
            初始化XML
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:GW.XML.XmlModel.OperationNumber(System.Int32,System.Type,System.Object[])">
            <summary>
            检验并计算
            </summary>
            <param name="operation">计算方式（1.加 2.减 3.乘 4.除 5.余）</param>
            <param name="type">类型</param>
            <param name="values">需要计算的数据</param>
        </member>
        <member name="M:GW.XML.XmlModel.AttributeClear">
            <summary>
            清空属性
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.Attribute(System.String,System.String)">
            <summary>
            设置属性（没有该属性时不自动添加）
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:GW.XML.XmlModel.Attributes(System.String,System.String)">
            <summary>
            设置属性（没有该属性时自动添加）
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:GW.XML.XmlModel.ContainsAttribute(System.String)">
            <summary>
            判断属性是否存在
            </summary>
            <param name="name">属性名</param>
        </member>
        <member name="M:GW.XML.XmlModel.RemoveAttribute(System.Int32)">
            <summary>
            移除属性
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:GW.XML.XmlModel.RemoveAttribute(System.String)">
            <summary>
            移除属性
            </summary>
            <param name="index">属性名</param>
        </member>
        <member name="M:GW.XML.XmlModel.Attribute(System.Int32)">
            <summary>
            根据索引获取属性值
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:GW.XML.XmlModel.Attribute(System.String)">
            <summary>
            根据名称获取属性值
            </summary>
            <param name="name">属性名</param>
        </member>
        <member name="M:GW.XML.XmlModel.ChildrenClear">
            <summary>
            清空子节点
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ContainsChildren(System.String)">
            <summary>
            判断子节点是否存在
            </summary>
            <param name="name">子节点名称</param>
        </member>
        <member name="M:GW.XML.XmlModel.Children(System.Int32)">
            <summary>
            根据索引获取子节点
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:GW.XML.XmlModel.SortBrother(System.Int32,System.Int32)">
            <summary>
            互换兄弟节点的位置
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.Sort(GW.Actions.Func{GW.XML.XmlModel,System.Int32})">
            <summary>
            对XML的兄弟节点或子节点生成的位置排序
            </summary>
            <param name="sort">排序委托（根据获取的节点返回排序所在的索引位置）</param>
        </member>
        <member name="M:GW.XML.XmlModel.ToXml">
            <summary>
            生成XML字符串
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToXml(System.Boolean)">
            <summary>
            生成XML字符串
            </summary>
            <param name="encode">是否是默认的UTF-8编码(true:utf-8|false:gb2312)</param>
        </member>
        <member name="M:GW.XML.XmlModel.ToXml(System.String)">
            <summary>
            生成XML字符串
            </summary>
            <param name="rootName">根节点名称</param>
        </member>
        <member name="M:GW.XML.XmlModel.ToXml(System.String,System.Boolean)">
            <summary>
            生成XML字符串
            </summary>
            <param name="rootName">根节点名称</param>
            <param name="encode">是否是默认的UTF-8编码(true:utf-8|false:gb2312)</param>
        </member>
        <member name="M:GW.XML.XmlModel.Save(System.String[])">
            <summary>
            使用IO流进行保存
            </summary>
            <param name="paths">保存的路径集合(缺省时，保存到默认路径下)</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.String)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.Text.StringBuilder)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.Int16)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.UInt16)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.Int32)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.UInt32)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.Int64)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.UInt64)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.Boolean)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.Single)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.Double)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.Decimal)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.DateTime)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.Char)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.Byte)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.SByte)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.Enum)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.Data.DataTable)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.Array)~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(System.Collections.Generic.List{GW.XML.IXMLToList})~GW.XML.XmlModel">
            <summary>
            赋值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.CreateModel(System.Object)">
            <summary>
            创建XML节点对象
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:GW.XML.XmlModel.CreateNode(System.Object,System.String)">
            <summary>
            创建XML节点对象
            </summary>
            <param name="value">值</param>
            <param name="defaultName">默认节点名称</param>
        </member>
        <member name="M:GW.XML.XmlModel.IsCommonType(System.Type)">
            <summary>
            判断是否为常用类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:GW.XML.XmlModel.Set(GW.XML.XmlModel,System.String,System.String)">
            <summary>
            设置指定XML路径下的值
            </summary>
            <param name="value">XmlModel实体</param>
            <param name="nodePath">XML路径字符串</param>
            <param name="separator">路径分隔符（默认“/”）</param>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.String">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.Text.StringBuilder">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.Int16">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.UInt16">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.Int32">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.UInt32">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.Int64">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.UInt64">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.Boolean">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.Single">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.Double">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.Decimal">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.DateTime">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.Char">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.Byte">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.SByte">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Implicit(GW.XML.XmlModel)~System.Data.DataTable">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.Get(System.String,System.String)">
            <summary>
            根据指定的XML路径字符串获取XML节点对象
            </summary>
            <param name="nodePath">XML路径字符串</param>
            <param name="separator">路径分隔符（默认“/”）</param>
            <returns>返回XmlModel实体</returns>
        </member>
        <member name="M:GW.XML.XmlModel.op_Addition(GW.XML.XmlModel,System.Object)">
            <summary>
            加值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Subtraction(System.Object,GW.XML.XmlModel)">
            <summary>
            减值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.op_Subtraction(GW.XML.XmlModel,System.Object)">
            <summary>
            减值
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToTypeCode">
            <summary>
            转TypeCode
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToBoolean">
            <summary>
            转Bool
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToByte">
            <summary>
            转Byte
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToChar">
            <summary>
            转Char
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToDateTime">
            <summary>
            转DateTime
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToDecimal">
            <summary>
            转Decimal
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToDouble">
            <summary>
            转Double
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToShort">
            <summary>
            转Short
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToInt">
            <summary>
            转Int
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToLong">
            <summary>
            转Long
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToSByte">
            <summary>
            转Sbyte
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToFloat">
            <summary>
            转Float
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToString">
            <summary>
            转String
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToUShort">
            <summary>
            转UShort
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToUInt">
            <summary>
            转UInt
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToULong">
            <summary>
            转ULong
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToDataTable">
            <summary>
            转DataTable
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToList``1">
            <summary>
            转List, T必须为IXMLToList的子类,且包含空构造函数
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.GetTypeCode">
            <summary>
            转TypeCode
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToBoolean(System.IFormatProvider)">
            <summary>
            转Bool
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToByte(System.IFormatProvider)">
            <summary>
            转Byte
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToChar(System.IFormatProvider)">
            <summary>
            转Char
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToDateTime(System.IFormatProvider)">
            <summary>
            转DateTime
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToDecimal(System.IFormatProvider)">
            <summary>
            转Decimal
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToDouble(System.IFormatProvider)">
            <summary>
            转Double
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToInt16(System.IFormatProvider)">
            <summary>
            转Short
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToInt32(System.IFormatProvider)">
            <summary>
            转Int
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToInt64(System.IFormatProvider)">
            <summary>
            转Long
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToSByte(System.IFormatProvider)">
            <summary>
            转SByte
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToSingle(System.IFormatProvider)">
            <summary>
            转Float
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToString(System.IFormatProvider)">
            <summary>
            转String
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToType(System.Type,System.IFormatProvider)">
            <summary>
            转Type
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToUInt16(System.IFormatProvider)">
            <summary>
            转UShort
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToUInt32(System.IFormatProvider)">
            <summary>
            转UInt
            </summary>
        </member>
        <member name="M:GW.XML.XmlModel.ToUInt64(System.IFormatProvider)">
            <summary>
            转ULong
            </summary>
        </member>
        <member name="T:GW.XML.ReadImplant">
            <summary>
            读取嵌入的XML(密封类，不能被继承)
            </summary>
        </member>
        <member name="M:GW.XML.ReadImplant.GetXml(System.String)">
            <summary>
            获取XML文件内容
            </summary>
            <param name="xmlFillName">XML完整的程序集路径</param>
        </member>
        <member name="M:GW.XML.ReadImplant.GetXml(System.IO.Stream)">
            <summary>
            获取XML文件内容
            </summary>
            <param name="stream">XML数据流</param>
        </member>
        <member name="M:GW.XML.ReadImplant.GetDom(System.String)">
            <summary>
            获取XML的DOM对象
            </summary>
            <param name="xmlFillName">XML完整的程序集路径</param>
        </member>
    </members>
</doc>
